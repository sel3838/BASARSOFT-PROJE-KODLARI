import EventType from"../events/EventType.js";import Feature from"../Feature.js";import Point from"../geom/Point.js";import VectorSource from"./Vector.js";import{add as addCoordinate,scale as scaleCoordinate}from"../coordinate.js";import{assert}from"../asserts.js";import{buffer,createEmpty,createOrUpdateFromCoordinate,getCenter}from"../extent.js";import{getUid}from"../util.js";class Cluster extends VectorSource{constructor(t){super({attributions:(t=t||{}).attributions,wrapX:t.wrapX}),this.resolution=void 0,this.distance=void 0!==t.distance?t.distance:20,this.minDistance=t.minDistance||0,this.interpolationRatio=0,this.features=[],this.geometryFunction=t.geometryFunction||function(t){const e=t.getGeometry();return assert(!e||"Point"===e.getType(),"The default `geometryFunction` can only handle `Point` or null geometries"),e},this.createCustomCluster_=t.createCluster,this.source=null,this.boundRefresh_=this.refresh.bind(this),this.updateDistance(this.distance,this.minDistance),this.setSource(t.source||null)}clear(t){this.features.length=0,super.clear(t)}getDistance(){return this.distance}getSource(){return this.source}loadFeatures(t,e,s){this.source?.loadFeatures(t,e,s),e!==this.resolution&&(this.resolution=e,this.refresh())}setDistance(t){this.updateDistance(t,this.minDistance)}setMinDistance(t){this.updateDistance(this.distance,t)}getMinDistance(){return this.minDistance}setSource(t){this.source&&this.source.removeEventListener(EventType.CHANGE,this.boundRefresh_),(this.source=t)&&t.addEventListener(EventType.CHANGE,this.boundRefresh_),this.refresh()}refresh(){this.clear(),this.cluster(),this.addFeatures(this.features)}updateDistance(t,e){var s=0===t?0:Math.min(e,t)/t,i=t!==this.distance||this.interpolationRatio!==s;this.distance=t,this.minDistance=e,this.interpolationRatio=s,i&&this.refresh()}cluster(){if(void 0!==this.resolution&&this.source){var s=createEmpty(),i=this.distance*this.resolution,r=this.source.getFeatures();const n={};for(let t=0,e=r.length;t<e;t++){var o=r[t];if(!(getUid(o)in n)){const a=this.geometryFunction(o);a&&(o=a.getCoordinates(),createOrUpdateFromCoordinate(o,s),buffer(s,i,s),o=this.source.getFeaturesInExtent(s).filter(function(t){t=getUid(t);return!(t in n)&&(n[t]=!0)}),this.features.push(this.createCluster(o,s)))}}}}createCluster(e,t){var s=[0,0];for(let t=e.length-1;0<=t;--t){const r=this.geometryFunction(e[t]);r?addCoordinate(s,r.getCoordinates()):e.splice(t,1)}scaleCoordinate(s,1/e.length);var t=getCenter(t),i=this.interpolationRatio;const r=new Point([s[0]*(1-i)+t[0]*i,s[1]*(1-i)+t[1]*i]);return this.createCustomCluster_?this.createCustomCluster_(r,e):new Feature({geometry:r,features:e})}}export default Cluster;