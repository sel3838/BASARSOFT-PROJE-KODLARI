import TileImage from"./TileImage.js";import{applyTransform,intersects}from"../extent.js";import{createFromTemplates}from"../tileurlfunction.js";import{createXYZ,extentFromProjection}from"../tilegrid.js";import{get as getProjection,getTransformFromProjections}from"../proj.js";import{jsonp as requestJSONP}from"../net.js";class TileJSON extends TileImage{constructor(t){if(super({attributions:t.attributions,cacheSize:t.cacheSize,crossOrigin:t.crossOrigin,interpolate:t.interpolate,projection:getProjection("EPSG:3857"),reprojectionErrorThreshold:t.reprojectionErrorThreshold,state:"loading",tileLoadFunction:t.tileLoadFunction,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,zDirection:t.zDirection}),this.tileJSON_=null,this.tileSize_=t.tileSize,t.url)if(t.jsonp)requestJSONP(t.url,this.handleTileJSONResponse.bind(this),this.handleTileJSONError.bind(this));else{const e=new XMLHttpRequest;e.addEventListener("load",this.onXHRLoad_.bind(this)),e.addEventListener("error",this.onXHRError_.bind(this)),e.open("GET",t.url),e.send()}else{if(!t.tileJSON)throw new Error("Either `url` or `tileJSON` options must be provided");this.handleTileJSONResponse(t.tileJSON)}}onXHRLoad_(e){e=e.target;if(!e.status||200<=e.status&&e.status<300){let t;try{t=JSON.parse(e.responseText)}catch(t){return void this.handleTileJSONError()}this.handleTileJSONResponse(t)}else this.handleTileJSONError()}onXHRError_(t){this.handleTileJSONError()}getTileJSON(){return this.tileJSON_}handleTileJSONResponse(e){var t=getProjection("EPSG:4326"),i=this.getProjection();let r;void 0!==e.bounds&&(t=getTransformFromProjections(t,i),r=applyTransform(e.bounds,t));var t=extentFromProjection(i),i=e.minzoom||0,o=e.maxzoom||22,o=createXYZ({extent:t,maxZoom:o,minZoom:i,tileSize:this.tileSize_});if(this.tileGrid=o,this.tileUrlFunction=createFromTemplates(e.tiles,o),e.attribution&&!this.getAttributions()){const s=void 0!==r?r:t;this.setAttributions(function(t){return intersects(s,t.extent)?[e.attribution]:null})}this.tileJSON_=e,this.setState("ready")}handleTileJSONError(){this.setState("error")}}export default TileJSON;