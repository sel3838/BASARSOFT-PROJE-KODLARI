import BaseVectorLayer from"../layer/BaseVector.js";import MapRenderer from"./Map.js";import ObjectEventType from"../ObjectEventType.js";import RenderEvent from"../render/Event.js";import RenderEventType from"../render/EventType.js";import{CLASS_UNSELECTABLE}from"../css.js";import{checkedFonts}from"../render/canvas.js";import{inView}from"../layer/Layer.js";import{listen,unlistenByKey}from"../events.js";import{replaceChildren}from"../dom.js";class CompositeMapRenderer extends MapRenderer{constructor(e){super(e),this.fontChangeListenerKey_=listen(checkedFonts,ObjectEventType.PROPERTYCHANGE,e.redrawText.bind(e)),this.element_=document.createElement("div");const t=this.element_.style,r=(t.position="absolute",t.width="100%",t.height="100%",t.zIndex="0",this.element_.className=CLASS_UNSELECTABLE+" ol-layers",e.getViewport());r.insertBefore(this.element_,r.firstChild||null),this.children_=[],this.renderedVisible_=!0}dispatchRenderEvent(e,t){const r=this.getMap();r.hasListener(e)&&(e=new RenderEvent(e,void 0,t),r.dispatchEvent(e))}disposeInternal(){unlistenByKey(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),super.disposeInternal()}renderFrame(n){if(n){this.calculateMatrices2D(n),this.dispatchRenderEvent(RenderEventType.PRECOMPOSE,n);const d=n.layerStatesArray.sort(function(e,t){return e.zIndex-t.zIndex});d.some(e=>e.layer instanceof BaseVectorLayer&&e.layer.getDeclutter())&&(n.declutter={});var s=n.viewState;const o=[];let r=null;for(let e=this.children_.length=0,t=d.length;e<t;++e){var i=d[e];n.layerIndex=e;const a=i.layer;var l=a.getSourceState();!inView(i,s)||"ready"!=l&&"undefined"!=l?a.unrender():(l=a.render(n,r))&&(l!==r&&(this.children_.push(l),r=l),o.push(i))}this.declutter(n,o),replaceChildren(this.element_,this.children_),this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE,n),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(n)}else this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1)}declutter(t,r){if(t.declutter){for(let e=r.length-1;0<=e;--e){var n=r[e];const s=n.layer;s.getDeclutter()&&s.renderDeclutter(t,n)}r.forEach(e=>e.layer.renderDeferred(t))}}}export default CompositeMapRenderer;