import BaseVector from"../../layer/BaseVector.js";import MixedGeometryBatch from"../../render/webgl/MixedGeometryBatch.js";import VectorEventType from"../../source/VectorEventType.js";import VectorStyleRenderer from"../../render/webgl/VectorStyleRenderer.js";import ViewHint from"../../ViewHint.js";import WebGLLayerRenderer from"./Layer.js";import WebGLRenderTarget from"../../webgl/RenderTarget.js";import{DefaultUniform}from"../../webgl/Helper.js";import{apply as applyTransform,create as createTransform,makeInverse as makeInverseTransform,multiply as multiplyTransform,setFromArray as setFromTransform,translate as translateTransform}from"../../transform.js";import{assert}from"../../asserts.js";import{buffer,createEmpty,equals}from"../../extent.js";import{colorDecodeId}from"../../render/webgl/utils.js";import{create as createMat4,fromTransform as mat4FromTransform}from"../../vec/mat4.js";import{getTransformFromProjections,getUserProjection,toUserExtent,toUserResolution}from"../../proj.js";import{getWorldParameters}from"./worldUtil.js";import{listen,unlistenByKey}from"../../events.js";const Uniforms={...DefaultUniform,RENDER_EXTENT:"u_renderExtent",PATTERN_ORIGIN:"u_patternOrigin",GLOBAL_ALPHA:"u_globalAlpha"};class WebGLVectorLayerRenderer extends WebGLLayerRenderer{constructor(e,t){super(e,{uniforms:{[Uniforms.RENDER_EXTENT]:[0,0,0,0],[Uniforms.PATTERN_ORIGIN]:[0,0],[Uniforms.GLOBAL_ALPHA]:1},postProcesses:t.postProcesses}),this.hitDetectionEnabled_=!t.disableHitDetection,this.hitRenderTarget_,this.sourceRevision_=-1,this.previousExtent_=createEmpty(),this.currentTransform_=createTransform(),this.tmpCoords_=[0,0],this.tmpTransform_=createTransform(),this.tmpMat4_=createMat4(),this.currentFrameStateTransform_=createTransform(),this.styles_=[],this.styleRenderers_=[],this.buffers_=[],this.applyOptions_(t),this.batch_=new MixedGeometryBatch,this.initialFeaturesAdded_=!1,this.sourceListenKeys_=null}addInitialFeatures_(e){const t=this.getLayer().getSource();var r=getUserProjection();let s;r&&(s=getTransformFromProjections(r,e.viewState.projection)),this.batch_.addFeatures(t.getFeatures(),s),this.sourceListenKeys_=[listen(t,VectorEventType.ADDFEATURE,this.handleSourceFeatureAdded_.bind(this,s),this),listen(t,VectorEventType.CHANGEFEATURE,this.handleSourceFeatureChanged_,this),listen(t,VectorEventType.REMOVEFEATURE,this.handleSourceFeatureDelete_,this),listen(t,VectorEventType.CLEAR,this.handleSourceFeatureClear_,this)]}applyOptions_(e){this.styles_=Array.isArray(e.style)?e.style:[e.style]}createRenderers_(){this.buffers_=[],this.styleRenderers_=this.styles_.map(e=>new VectorStyleRenderer(e,this.helper,this.hitDetectionEnabled_))}reset(e){this.applyOptions_(e),this.helper&&this.createRenderers_(),super.reset(e)}afterHelperCreated(){this.createRenderers_(),this.hitDetectionEnabled_&&(this.hitRenderTarget_=new WebGLRenderTarget(this.helper))}handleSourceFeatureAdded_(e,t){t=t.feature;this.batch_.addFeature(t,e)}handleSourceFeatureChanged_(e){e=e.feature;this.batch_.changeFeature(e)}handleSourceFeatureDelete_(e){e=e.feature;this.batch_.removeFeature(e)}handleSourceFeatureClear_(){this.batch_.clear()}applyUniforms_(e){setFromTransform(this.tmpTransform_,this.currentFrameStateTransform_),multiplyTransform(this.tmpTransform_,e),this.helper.setUniformMatrixValue(Uniforms.PROJECTION_MATRIX,mat4FromTransform(this.tmpMat4_,this.tmpTransform_)),makeInverseTransform(this.tmpTransform_,this.tmpTransform_),this.helper.setUniformMatrixValue(Uniforms.SCREEN_TO_WORLD_MATRIX,mat4FromTransform(this.tmpMat4_,this.tmpTransform_)),this.tmpCoords_[0]=0,this.tmpCoords_[1]=0,makeInverseTransform(this.tmpTransform_,e),applyTransform(this.tmpTransform_,this.tmpCoords_),this.helper.setUniformFloatVec2(Uniforms.PATTERN_ORIGIN,this.tmpCoords_)}renderFrame(e){var t=this.helper.getGL(),[r,s,i]=(this.preRender(t,e),getWorldParameters(e,this.getLayer()));this.helper.prepareDraw(e),this.renderWorlds(e,!1,r,s,i),this.helper.finalizeDraw(e);const a=this.helper.getCanvas();var o=e.layerStatesArray[e.layerIndex].opacity;return o!==parseFloat(a.style.opacity)&&(a.style.opacity=String(o)),this.hitDetectionEnabled_&&(this.renderWorlds(e,!0,r,s,i),this.hitRenderTarget_.clearCachedData()),this.postRender(t,e),a}prepareFrameInternal(e){this.initialFeaturesAdded_||(this.addInitialFeatures_(e),this.initialFeaturesAdded_=!0);const t=this.getLayer(),r=t.getSource();var s=e.viewState,i=!e.viewHints[ViewHint.ANIMATING]&&!e.viewHints[ViewHint.INTERACTING],a=!equals(this.previousExtent_,e.extent),o=this.sourceRevision_<r.getRevision();if(o&&(this.sourceRevision_=r.getRevision()),i&&(a||o)){i=s.projection,a=s.resolution,o=t instanceof BaseVector?t.getRenderBuffer():0,s=buffer(e.extent,o*a),o=getUserProjection();o?r.loadFeatures(toUserExtent(s,o),toUserResolution(a,i),o):r.loadFeatures(s,a,i),this.ready=!1;const n=this.helper.makeProjectionTransform(e,createTransform());o=this.styleRenderers_.map((e,t)=>e.generateBuffers(this.batch_,n).then(e=>{this.buffers_[t]=e}));Promise.all(o).then(()=>{this.ready=!0,this.getLayer().changed()}),this.previousExtent_=e.extent.slice()}return!0}renderWorlds(r,s,e,t,i){let a=e;s&&(this.hitRenderTarget_.setSize([Math.floor(r.size[0]/2),Math.floor(r.size[1]/2)]),this.helper.prepareDrawToRenderTarget(r,this.hitRenderTarget_,!0));do{this.helper.makeProjectionTransform(r,this.currentFrameStateTransform_),translateTransform(this.currentFrameStateTransform_,a*i,0);for(let e=0,t=this.styleRenderers_.length;e<t;e++){const o=this.styleRenderers_[e],n=this.buffers_[e];n&&o.render(n,r,()=>{this.applyUniforms_(n.invertVerticesTransform),this.helper.applyHitDetectionUniform(s)})}}while(++a<t)}forEachFeatureAtCoordinate(e,t,r,s,i){if(assert(this.hitDetectionEnabled_,"`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has been disabled using the `disableHitDetection: true` option."),this.styleRenderers_.length&&this.hitDetectionEnabled_)return t=applyTransform(t.coordinateToPixelTransform,e.slice()),e=this.hitRenderTarget_.readPixel(t[0]/2,t[1]/2),t=[e[0]/255,e[1]/255,e[2]/255,e[3]/255],e=colorDecodeId(t),t=this.batch_.getFeatureFromRef(e),t?s(t,this.getLayer(),null):void 0}disposeInternal(){this.sourceListenKeys_&&(this.sourceListenKeys_.forEach(function(e){unlistenByKey(e)}),this.sourceListenKeys_=null),super.disposeInternal()}}export default WebGLVectorLayerRenderer;export{Uniforms};