import LayerProperty from"../../layer/Property.js";import LayerRenderer from"../Layer.js";import RenderEvent from"../../render/Event.js";import RenderEventType from"../../render/EventType.js";import WebGLHelper from"../../webgl/Helper.js";import{compose as composeTransform,create as createTransform}from"../../transform.js";class WebGLLayerRenderer extends LayerRenderer{constructor(e,r){super(e),r=r||{},this.inversePixelTransform_=createTransform(),this.pixelContext_=null,this.postProcesses_=r.postProcesses,this.uniforms_=r.uniforms,this.helper,e.addChangeListener(LayerProperty.MAP,this.removeHelper.bind(this)),this.dispatchPreComposeEvent=this.dispatchPreComposeEvent.bind(this),this.dispatchPostComposeEvent=this.dispatchPostComposeEvent.bind(this)}dispatchPreComposeEvent(e,r){const s=this.getLayer();s.hasListener(RenderEventType.PRECOMPOSE)&&(r=new RenderEvent(RenderEventType.PRECOMPOSE,void 0,r,e),s.dispatchEvent(r))}dispatchPostComposeEvent(e,r){const s=this.getLayer();s.hasListener(RenderEventType.POSTCOMPOSE)&&(r=new RenderEvent(RenderEventType.POSTCOMPOSE,void 0,r,e),s.dispatchEvent(r))}reset(e){this.uniforms_=e.uniforms,this.helper&&this.helper.setUniforms(this.uniforms_)}removeHelper(){this.helper&&(this.helper.dispose(),delete this.helper)}prepareFrame(i){if(this.getLayer().getRenderSource()){let s=!0,t=-1,n;for(let e=0,r=i.layerStatesArray.length;e<r;e++){const p=i.layerStatesArray[e].layer;var a=p.getRenderer();if(a instanceof WebGLLayerRenderer){var o=p.getClassName();if(!s&&o===n||(t+=1,s=!1),n=o,a===this)break}else s=!0}var e="map/"+i.mapId+"/group/"+t;this.helper&&this.helper.canvasCacheKeyMatches(e)&&!this.helper.needsToBeRecreated()||(this.removeHelper(),this.helper=new WebGLHelper({postProcesses:this.postProcesses_,uniforms:this.uniforms_,canvasCacheKey:e}),n&&(this.helper.getCanvas().className=n),this.afterHelperCreated())}return this.prepareFrameInternal(i)}afterHelperCreated(){}prepareFrameInternal(e){return!0}disposeInternal(){this.removeHelper(),super.disposeInternal()}dispatchRenderEvent_(e,r,s){const t=this.getLayer();t.hasListener(e)&&(composeTransform(this.inversePixelTransform_,0,0,s.pixelRatio,-s.pixelRatio,0,0,-s.size[1]),e=new RenderEvent(e,this.inversePixelTransform_,s,r),t.dispatchEvent(e))}preRender(e,r){this.dispatchRenderEvent_(RenderEventType.PRERENDER,e,r)}postRender(e,r){this.dispatchRenderEvent_(RenderEventType.POSTRENDER,e,r)}}export default WebGLLayerRenderer;