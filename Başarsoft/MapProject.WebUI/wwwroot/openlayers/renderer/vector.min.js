import ImageState from"../ImageState.js";import{getUid}from"../util.js";const SIMPLIFY_TOLERANCE=.5,GEOMETRY_RENDERERS={Point:renderPointGeometry,LineString:renderLineStringGeometry,Polygon:renderPolygonGeometry,MultiPoint:renderMultiPointGeometry,MultiLineString:renderMultiLineStringGeometry,MultiPolygon:renderMultiPolygonGeometry,GeometryCollection:renderGeometryCollectionGeometry,Circle:renderCircleGeometry};function defaultOrder(e,t){return parseInt(getUid(e),10)-parseInt(getUid(t),10)}function getSquaredTolerance(e,t){e=getTolerance(e,t);return e*e}function getTolerance(e,t){return SIMPLIFY_TOLERANCE*e/t}function renderCircleGeometry(e,t,r,n,o){var i=r.getFill(),g=r.getStroke();if(i||g){const d=e.getBuilder(r.getZIndex(),"Circle");d.setFillStrokeStyle(i,g),d.drawCircle(t,n,o)}const l=r.getText();if(l&&l.getText()){const a=e.getBuilder(r.getZIndex(),"Text");a.setTextStyle(l),a.drawText(t,n)}}function renderFeature(e,t,r,n,o,i,g,l){const d=[],a=r.getImage();if(a){let e=!0;var u=a.getImageState();u==ImageState.LOADED||u==ImageState.ERROR?e=!1:u==ImageState.IDLE&&a.load(),e&&d.push(a.ready())}const c=r.getFill();c&&c.loading()&&d.push(c.ready());u=0<d.length;return u&&Promise.all(d).then(()=>o(null)),renderFeatureInternal(e,t,r,n,i,g,l),u}function renderFeatureInternal(e,t,r,n,o,i,g){const l=r.getGeometryFunction()(t);if(l){const d=l.simplifyTransformed(n,o);if(r.getRenderer())renderGeometry(e,d,r,t,g);else{const a=GEOMETRY_RENDERERS[d.getType()];a(e,d,r,t,g,i)}}}function renderGeometry(r,e,n,o,i){if("GeometryCollection"==e.getType()){var g=e.getGeometries();for(let e=0,t=g.length;e<t;++e)renderGeometry(r,g[e],n,o,i)}else{const t=r.getBuilder(n.getZIndex(),"Default");t.drawCustom(e,o,n.getRenderer(),n.getHitDetectionRenderer(),i)}}function renderGeometryCollectionGeometry(e,t,r,n,o,i){const g=t.getGeometriesArray();let l,d;for(l=0,d=g.length;l<d;++l){const a=GEOMETRY_RENDERERS[g[l].getType()];a(e,g[l],r,n,o,i)}}function renderLineStringGeometry(e,t,r,n,o){var i=r.getStroke();if(i){const l=e.getBuilder(r.getZIndex(),"LineString");l.setFillStrokeStyle(null,i),l.drawLineString(t,n,o)}const g=r.getText();if(g&&g.getText()){const d=e.getBuilder(r.getZIndex(),"Text");d.setTextStyle(g),d.drawText(t,n,o)}}function renderMultiLineStringGeometry(e,t,r,n,o){var i=r.getStroke();if(i){const l=e.getBuilder(r.getZIndex(),"LineString");l.setFillStrokeStyle(null,i),l.drawMultiLineString(t,n,o)}const g=r.getText();if(g&&g.getText()){const d=e.getBuilder(r.getZIndex(),"Text");d.setTextStyle(g),d.drawText(t,n,o)}}function renderMultiPolygonGeometry(e,t,r,n,o){var i=r.getFill(),g=r.getStroke();if(g||i){const d=e.getBuilder(r.getZIndex(),"Polygon");d.setFillStrokeStyle(i,g),d.drawMultiPolygon(t,n,o)}const l=r.getText();if(l&&l.getText()){const a=e.getBuilder(r.getZIndex(),"Text");a.setTextStyle(l),a.drawText(t,n,o)}}function renderPointGeometry(e,t,r,n,o,i){const g=r.getImage(),l=r.getText();var d=l&&l.getText(),i=i&&g&&d?{}:void 0;if(g){if(g.getImageState()!=ImageState.LOADED)return;const a=e.getBuilder(r.getZIndex(),"Image");a.setImageStyle(g,i),a.drawPoint(t,n,o)}if(d){const u=e.getBuilder(r.getZIndex(),"Text");u.setTextStyle(l,i),u.drawText(t,n,o)}}function renderMultiPointGeometry(e,t,r,n,o,i){const g=r.getImage();var l=g&&0!==g.getOpacity();const d=r.getText();var a=d&&d.getText(),i=i&&l&&a?{}:void 0;if(l){if(g.getImageState()!=ImageState.LOADED)return;const u=e.getBuilder(r.getZIndex(),"Image");u.setImageStyle(g,i),u.drawMultiPoint(t,n,o)}if(a){const c=e.getBuilder(r.getZIndex(),"Text");c.setTextStyle(d,i),c.drawText(t,n,o)}}function renderPolygonGeometry(e,t,r,n,o){var i=r.getFill(),g=r.getStroke();if(i||g){const d=e.getBuilder(r.getZIndex(),"Polygon");d.setFillStrokeStyle(i,g),d.drawPolygon(t,n,o)}const l=r.getText();if(l&&l.getText()){const a=e.getBuilder(r.getZIndex(),"Text");a.setTextStyle(l),a.drawText(t,n,o)}}export{defaultOrder,getSquaredTolerance,getTolerance,renderFeature};