import EventType from"../events/EventType.js";import ImageState from"../ImageState.js";import Observable from"../Observable.js";import{abstract}from"../util.js";class LayerRenderer extends Observable{constructor(e){super(),this.ready=!0,this.boundHandleImageChange_=this.handleImageChange_.bind(this),this.layer_=e}getFeatures(e){return abstract()}getData(e){return null}prepareFrame(e){return abstract()}renderFrame(e,t){return abstract()}loadedTileCallback(e,t,a){e[t]||(e[t]={}),e[t][a.tileCoord.toString()]=a}createLoadedTileFinder(r,n,d){return(e,t)=>{var a=this.loadedTileCallback.bind(this,d,e);return r.forEachLoadedTile(n,e,t,a)}}forEachFeatureAtCoordinate(e,t,a,r,n){}getLayer(){return this.layer_}handleFontsChanged(){}handleImageChange_(e){const t=e.target;t.getState()!==ImageState.LOADED&&t.getState()!==ImageState.ERROR||this.renderIfReadyAndVisible()}loadImage(e){let t=e.getState();return t!=ImageState.LOADED&&t!=ImageState.ERROR&&e.addEventListener(EventType.CHANGE,this.boundHandleImageChange_),t==ImageState.IDLE&&(e.load(),t=e.getState()),t==ImageState.LOADED}renderIfReadyAndVisible(){const e=this.getLayer();e&&e.getVisible()&&"ready"===e.getSourceState()&&e.changed()}renderDeferred(e){}disposeInternal(){delete this.layer_,super.disposeInternal()}}export default LayerRenderer;