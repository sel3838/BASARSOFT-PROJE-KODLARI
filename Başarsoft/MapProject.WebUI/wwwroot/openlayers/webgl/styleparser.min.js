import{BooleanType,ColorType,NumberArrayType,NumberType,SizeType,StringType,newParsingContext}from"../expr/expression.js";import{ShaderBuilder}from"./ShaderBuilder.js";import{arrayToGlsl,buildExpression,getStringNumberEquivalent,stringToGlsl,uniformNameForVariable}from"../expr/gpu.js";import{asArray}from"../color.js";function expressionToGlsl(e,t,o){const s=newParsingContext();return s.style=e.style,buildExpression(t,o,s,e)}function packColor(e){e=asArray(e);return[256*e[0]+e[1],256*e[2]+Math.round(255*e[3])]}const UNPACK_COLOR_FN=`vec4 unpackColor(vec2 packedColor) {
  return fract(packedColor[1] / 256.0) * vec4(
    fract(floor(packedColor[0] / 256.0) / 256.0),
    fract(packedColor[0] / 256.0),
    fract(floor(packedColor[1] / 256.0) / 256.0),
    1.0
  );
}`;function getGlslSizeFromType(e){return e===ColorType||e===SizeType?2:e===NumberArrayType?4:1}function getGlslTypeFromType(e){e=getGlslSizeFromType(e);return 1<e?"vec"+e:"float"}function computeHash(e){return(JSON.stringify(e).split("").reduce((e,t)=>(e<<5)-e+t.charCodeAt(0),0)>>>0).toString()}function parseCommonSymbolProperties(t,o,s,r){if(r+"radius"in t&&"icon-"!==r){let e=expressionToGlsl(s,t[r+"radius"],NumberType);r+"radius2"in t&&(i=expressionToGlsl(s,t[r+"radius2"],NumberType),e=`max(${e}, ${i})`),r+"stroke-width"in t&&(e=`(${e} + ${expressionToGlsl(s,t[r+"stroke-width"],NumberType)} * 0.5)`),o.setSymbolSizeExpression(`vec2(${e} * 2. + 0.5)`)}var i;r+"scale"in t&&(i=expressionToGlsl(s,t[r+"scale"],SizeType),o.setSymbolSizeExpression(o.getSymbolSizeExpression()+" * "+i)),r+"displacement"in t&&o.setSymbolOffsetExpression(expressionToGlsl(s,t[r+"displacement"],NumberArrayType)),r+"rotation"in t&&o.setSymbolRotationExpression(expressionToGlsl(s,t[r+"rotation"],NumberType)),r+"rotate-with-view"in t&&o.setSymbolRotateWithView(!!t[r+"rotate-with-view"])}function getColorFromDistanceField(e,t,o,s,r){let i="vec4(0.)";null!==t&&(i=t);t=`(1.0 - smoothstep(-0.63, 0.58, ${e}))`;let a=(i=null!==o&&null!==s?`mix(${o}, ${i}, ${`smoothstep(-${s} + 0.63, -${s} - 0.58, ${e})`})`:i)+" * "+t;return a=null!==r?a+" * "+r:a}function parseImageProperties(e,t,o,s,r){const i=new Image;let a;return i.crossOrigin=void 0===e[s+"cross-origin"]?"anonymous":e[s+"cross-origin"],i.src=e[s+"src"],a=i.complete&&i.width&&i.height?arrayToGlsl([i.width,i.height]):(o[`u_texture${r}_size`]=()=>i.complete?[i.width,i.height]:[0,0],t.addUniform(`vec2 u_texture${r}_size`),`u_texture${r}_size`),o["u_texture"+r]=i,t.addUniform("sampler2D u_texture"+r),a}function parseImageOffsetProperties(e,t,o,s,r){let i=expressionToGlsl(o,e[t+"offset"],NumberArrayType);if(t+"offset-origin"in e)switch(e[t+"offset-origin"]){case"top-right":i=`vec2(${s}.x, 0.) + ${r} * vec2(-1., 0.) + ${i} * vec2(-1., 1.)`;break;case"bottom-left":i=`vec2(0., ${s}.y) + ${r} * vec2(0., -1.) + ${i} * vec2(1., -1.)`;break;case"bottom-right":i=s+` - ${r} - `+i}return i}function parseCircleProperties(e,t,o,s,r){r.functions.circleDistanceField=`float circleDistanceField(vec2 point, float radius) {
  return length(point) - radius;
}`,parseCommonSymbolProperties(e,t,s,"circle-");let i=null,a=("circle-opacity"in e&&(i=expressionToGlsl(r,e["circle-opacity"],NumberType)),"coordsPx");"circle-scale"in e&&(s=expressionToGlsl(r,e["circle-scale"],SizeType),a="coordsPx / "+s);let n=null,l=("circle-fill-color"in e&&(n=expressionToGlsl(r,e["circle-fill-color"],ColorType)),null),p=("circle-stroke-color"in e&&(l=expressionToGlsl(r,e["circle-stroke-color"],ColorType)),expressionToGlsl(r,e["circle-radius"],NumberType)),c=null;"circle-stroke-width"in e&&(c=expressionToGlsl(r,e["circle-stroke-width"],NumberType),p=`(${p} + ${c} * 0.5)`);s=getColorFromDistanceField(`circleDistanceField(${a}, ${p})`,n,l,c,i);t.setSymbolColorExpression(s)}function parseShapeProperties(t,e,o,s,r){r.functions.round=`float round(float v) {
  return sign(v) * floor(abs(v) + 0.5);
}`,r.functions.starDistanceField=`float starDistanceField(vec2 point, float numPoints, float radius, float radius2, float angle) {
  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle
  float c = cos(startAngle);
  float s = sin(startAngle);
  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);
  float alpha = TWO_PI / numPoints; // the angle of one sector
  float beta = atan(pointRotated.y, pointRotated.x);
  float gamma = round(beta / alpha) * alpha; // angle in sector
  c = cos(-gamma);
  s = sin(-gamma);
  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));
  vec2 tipToPoint = inSector + vec2(-radius, 0.);
  vec2 edgeNormal = vec2(radius2 * sin(alpha * 0.5), -radius2 * cos(alpha * 0.5) + radius);
  return dot(normalize(edgeNormal), tipToPoint);
}`,r.functions.regularDistanceField=`float regularDistanceField(vec2 point, float numPoints, float radius, float angle) {
  float startAngle = -PI * 0.5 + angle; // tip starts upwards and rotates clockwise with angle
  float c = cos(startAngle);
  float s = sin(startAngle);
  vec2 pointRotated = vec2(c * point.x - s * point.y, s * point.x + c * point.y);
  float alpha = TWO_PI / numPoints; // the angle of one sector
  float radiusIn = radius * cos(PI / numPoints);
  float beta = atan(pointRotated.y, pointRotated.x);
  float gamma = round((beta - alpha * 0.5) / alpha) * alpha + alpha * 0.5; // angle in sector from mid
  c = cos(-gamma);
  s = sin(-gamma);
  vec2 inSector = vec2(c * pointRotated.x - s * pointRotated.y, abs(s * pointRotated.x + c * pointRotated.y));
  return inSector.x - radiusIn;
}`,parseCommonSymbolProperties(t,e,s,"shape-");let i=null,a=("shape-opacity"in t&&(i=expressionToGlsl(r,t["shape-opacity"],NumberType)),"coordsPx");"shape-scale"in t&&(s=expressionToGlsl(r,t["shape-scale"],SizeType),a="coordsPx / "+s);let n=null,l=("shape-fill-color"in t&&(n=expressionToGlsl(r,t["shape-fill-color"],ColorType)),null),p=("shape-stroke-color"in t&&(l=expressionToGlsl(r,t["shape-stroke-color"],ColorType)),null);"shape-stroke-width"in t&&(p=expressionToGlsl(r,t["shape-stroke-width"],NumberType));s=expressionToGlsl(r,t["shape-points"],NumberType);let c="0.";"shape-angle"in t&&(c=expressionToGlsl(r,t["shape-angle"],NumberType));let u,m=expressionToGlsl(r,t["shape-radius"],NumberType);if(null!==p&&(m=`${m} + ${p} * 0.5`),"shape-radius2"in t){let e=expressionToGlsl(r,t["shape-radius2"],NumberType);null!==p&&(e=`${e} + ${p} * 0.5`),u=`starDistanceField(${a}, ${s}, ${m}, ${e}, ${c})`}else u=`regularDistanceField(${a}, ${s}, ${m}, ${c})`;r=getColorFromDistanceField(u,n,l,p,i);e.setSymbolColorExpression(r)}function parseIconProperties(s,r,e,i,t){let o="vec4(1.0)";"icon-color"in s&&(o=expressionToGlsl(t,s["icon-color"],ColorType)),"icon-opacity"in s&&(o=o+" * "+expressionToGlsl(t,s["icon-opacity"],NumberType));var t=computeHash(s["icon-src"]),e=parseImageProperties(s,r,e,"icon-",t);if(r.setSymbolColorExpression(o+` * samplePremultiplied(u_texture${t}, v_texCoord)`).setSymbolSizeExpression(e),"icon-width"in s&&"icon-height"in s&&r.setSymbolSizeExpression(`vec2(${expressionToGlsl(i,s["icon-width"],NumberType)}, ${expressionToGlsl(i,s["icon-height"],NumberType)})`),"icon-offset"in s&&"icon-size"in s&&(t=expressionToGlsl(i,s["icon-size"],NumberArrayType),e=r.getSymbolSizeExpression(),r.setSymbolSizeExpression(t),a=parseImageOffsetProperties(s,"icon-",i,"v_quadSizePx",t),r.setTextureCoordinateExpression(`(vec4((${a}).xyxy) + vec4(0., 0., ${t})) / (${e}).xyxy`)),parseCommonSymbolProperties(s,r,i,"icon-"),"icon-anchor"in s){var a=expressionToGlsl(i,s["icon-anchor"],NumberArrayType);let e="1.0";"icon-scale"in s&&(e=expressionToGlsl(i,s["icon-scale"],SizeType));let t,o=`v_quadSizePx * vec2(0.5, -0.5) + ${t="pixels"===s["icon-anchor-x-units"]&&"pixels"===s["icon-anchor-y-units"]?a+" * "+e:"pixels"===s["icon-anchor-x-units"]?`${a} * vec2(vec2(${e}).x, v_quadSizePx.y)`:"pixels"===s["icon-anchor-y-units"]?`${a} * vec2(v_quadSizePx.x, vec2(${e}).x)`:a+" * v_quadSizePx"} * vec2(-1., 1.)`;if("icon-anchor-origin"in s)switch(s["icon-anchor-origin"]){case"top-right":o="v_quadSizePx * -0.5 + "+t;break;case"bottom-left":o="v_quadSizePx * 0.5 - "+t;break;case"bottom-right":o=`v_quadSizePx * vec2(-0.5, 0.5) + ${t} * vec2(1., -1.)`}r.setSymbolOffsetExpression(r.getSymbolOffsetExpression()+" + "+o)}}function parseStrokeProperties(r,i,a,n,l){if("stroke-color"in r&&i.setStrokeColorExpression(expressionToGlsl(l,r["stroke-color"],ColorType)),"stroke-pattern-src"in r){var p=computeHash(r["stroke-pattern-src"]),a=parseImageProperties(r,i,a,"stroke-pattern-",p);let e=a,t="vec2(0.)",o=("stroke-pattern-offset"in r&&"stroke-pattern-size"in r&&(e=expressionToGlsl(l,r["stroke-pattern-size"],NumberArrayType),t=parseImageOffsetProperties(r,"stroke-pattern-",l,a,e)),"0.");"stroke-pattern-spacing"in r&&(o=expressionToGlsl(l,r["stroke-pattern-spacing"],NumberType)),l.functions.sampleStrokePattern=`vec4 sampleStrokePattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, float spacingPx, float currentLengthPx, float currentRadiusRatio, float lineWidth) {
  float currentLengthScaled = currentLengthPx * sampleSize.y / lineWidth;
  float spacingScaled = spacingPx * sampleSize.y / lineWidth;
  float uCoordPx = mod(currentLengthScaled, (sampleSize.x + spacingScaled));
  // make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels
  uCoordPx = clamp(uCoordPx, 0.5, sampleSize.x - 0.5);
  float vCoordPx = (-currentRadiusRatio * 0.5 + 0.5) * sampleSize.y;
  vec2 texCoord = (vec2(uCoordPx, vCoordPx) + textureOffset) / textureSize;
  return samplePremultiplied(texture, texCoord);
}`;p="u_texture"+p;let s="1.";"stroke-color"in r&&(s=i.getStrokeColorExpression()),i.setStrokeColorExpression(`${s} * sampleStrokePattern(${p}, ${a}, ${t}, ${e}, ${o}, currentLengthPx, currentRadiusRatio, v_width)`)}if("stroke-width"in r&&i.setStrokeWidthExpression(expressionToGlsl(n,r["stroke-width"],NumberType)),"stroke-offset"in r&&i.setStrokeOffsetExpression(expressionToGlsl(n,r["stroke-offset"],NumberType)),"stroke-line-cap"in r&&i.setStrokeCapExpression(expressionToGlsl(n,r["stroke-line-cap"],StringType)),"stroke-line-join"in r&&i.setStrokeJoinExpression(expressionToGlsl(n,r["stroke-line-join"],StringType)),"stroke-miter-limit"in r&&i.setStrokeMiterLimitExpression(expressionToGlsl(n,r["stroke-miter-limit"],NumberType)),"stroke-line-dash"in r){l.functions.getSingleDashDistance=`float getSingleDashDistance(float distance, float radius, float dashOffset, float dashLength, float dashLengthTotal, float capType) {
  float localDistance = mod(distance, dashLengthTotal);
  float distanceSegment = abs(localDistance - dashOffset - dashLength * 0.5) - dashLength * 0.5;
  distanceSegment = min(distanceSegment, dashLengthTotal - localDistance);
  if (capType == ${stringToGlsl("square")}) {
    distanceSegment -= v_width * 0.5;
  } else if (capType == ${stringToGlsl("round")}) {
    distanceSegment = min(distanceSegment, sqrt(distanceSegment * distanceSegment + radius * radius) - v_width * 0.5);
  }
  return distanceSegment;
}`;let t=r["stroke-line-dash"].map(e=>expressionToGlsl(l,e,NumberType)),e=(t.length%2==1&&(t=[...t,...t]),"0.");"stroke-line-dash-offset"in r&&(e=expressionToGlsl(n,r["stroke-line-dash-offset"],NumberType));p="dashDistanceField_"+computeHash(r["stroke-line-dash"]);const c=t.map((e,t)=>`float dashLength${t} = ${e};`);a=t.map((e,t)=>"dashLength"+t).join(" + ");let o="0.",s=`getSingleDashDistance(distance, radius, ${o}, dashLength0, totalDashLength, capType)`;for(let e=2;e<t.length;e+=2)o=`${o} + dashLength${e-2} + dashLength`+(e-1),s=`min(${s}, getSingleDashDistance(distance, radius, ${o}, dashLength${e}, totalDashLength, capType))`;l.functions[p]=`float ${p}(float distance, float radius, float capType) {
  ${c.join("\n  ")}
  float totalDashLength = ${a};
  return ${s};
}`,i.setStrokeDistanceFieldExpression(p+`(currentLengthPx + ${e}, currentRadiusPx, capType)`)}}function parseFillProperties(s,r,i,e,a){if("fill-color"in s&&r.setFillColorExpression(expressionToGlsl(a,s["fill-color"],ColorType)),"fill-pattern-src"in s){var n=computeHash(s["fill-pattern-src"]),i=parseImageProperties(s,r,i,"fill-pattern-",n);let e=i,t="vec2(0.)";"fill-pattern-offset"in s&&"fill-pattern-size"in s&&(e=expressionToGlsl(a,s["fill-pattern-size"],NumberArrayType),t=parseImageOffsetProperties(s,"fill-pattern-",a,i,e)),a.functions.sampleFillPattern=`vec4 sampleFillPattern(sampler2D texture, vec2 textureSize, vec2 textureOffset, vec2 sampleSize, vec2 pxOrigin, vec2 pxPosition) {
  float scaleRatio = pow(2., mod(u_zoom + 0.5, 1.) - 0.5);
  vec2 pxRelativePos = pxPosition - pxOrigin;
  // rotate the relative position from origin by the current view rotation
  pxRelativePos = vec2(pxRelativePos.x * cos(u_rotation) - pxRelativePos.y * sin(u_rotation), pxRelativePos.x * sin(u_rotation) + pxRelativePos.y * cos(u_rotation));
  // sample position is computed according to the sample offset & size
  vec2 samplePos = mod(pxRelativePos / scaleRatio, sampleSize);
  // also make sure that we're not sampling too close to the borders to avoid interpolation with outside pixels
  samplePos = clamp(samplePos, vec2(0.5), sampleSize - vec2(0.5));
  samplePos.y = sampleSize.y - samplePos.y; // invert y axis so that images appear upright
  return samplePremultiplied(texture, (samplePos + textureOffset) / textureSize);
}`;a="u_texture"+n;let o="1.";"fill-color"in s&&(o=r.getFillColorExpression()),r.setFillColorExpression(`${o} * sampleFillPattern(${a}, ${i}, ${t}, ${e}, pxOrigin, pxPos)`)}}function parseLiteralStyle(s){const r={inFragmentShader:!1,properties:{},variables:{},functions:{},style:s},i={inFragmentShader:!0,variables:r.variables,properties:{},functions:{},style:s},a=new ShaderBuilder,n={};var e;"icon-src"in s?parseIconProperties(s,a,n,r,i):"shape-points"in s?parseShapeProperties(s,a,n,r,i):"circle-radius"in s&&parseCircleProperties(s,a,n,r,i),parseStrokeProperties(s,a,n,r,i),parseFillProperties(s,a,n,r,i),s.filter&&(e=expressionToGlsl(i,s.filter,BooleanType),a.setFragmentDiscardExpression("!"+e)),Object.keys(i.variables).forEach(function(e){const t=i.variables[e];e=uniformNameForVariable(t.name);a.addUniform(getGlslTypeFromType(t.type)+" "+e);let o;o=t.type===StringType?()=>getStringNumberEquivalent(s.variables[t.name]):t.type===ColorType?()=>packColor([...asArray(s.variables[t.name]||"#eee")]):t.type===BooleanType?()=>s.variables[t.name]?1:0:()=>s.variables[t.name],n[e]=o}),Object.keys(i.properties).forEach(function(e){var t=i.properties[e];r.properties[e]||(r.properties[e]=t);let o=getGlslTypeFromType(t.type),s="a_prop_"+t.name;t.type===ColorType&&(o="vec4",s=`unpackColor(${s})`,a.addVertexShaderFunction(UNPACK_COLOR_FN)),a.addVarying("v_prop_"+t.name,o,s)}),Object.keys(r.properties).forEach(function(e){e=r.properties[e];a.addAttribute(getGlslTypeFromType(e.type)+" a_prop_"+e.name)});const t=Object.keys(r.properties).map(function(e){const t=r.properties[e];let o;return o=t.evaluator||(t.type===StringType?e=>getStringNumberEquivalent(e.get(t.name)):t.type===ColorType?e=>packColor([...asArray(e.get(t.name)||"#eee")]):t.type===BooleanType?e=>e.get(t.name)?1:0:e=>e.get(t.name)),{name:t.name,size:getGlslSizeFromType(t.type),callback:o}});for(const o in r.functions)a.addVertexShaderFunction(r.functions[o]);for(const l in i.functions)a.addFragmentShaderFunction(i.functions[l]);return{builder:a,attributes:t.reduce((e,t)=>({...e,[t.name]:{callback:t.callback,size:t.size}}),{}),uniforms:n}}export{expressionToGlsl,packColor,computeHash,parseLiteralStyle};