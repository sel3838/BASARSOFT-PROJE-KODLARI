import EventTarget from"../events/Target.js";import EventType from"../events/EventType.js";import ImageTile from"../ImageTile.js";import TileState from"../TileState.js";import{abstract}from"../util.js";class BaseTileRepresentation extends EventTarget{constructor(e){super(),this.tile,this.handleTileChange_=this.handleTileChange_.bind(this),this.gutter_=e.gutter||0,this.helper_=e.helper,this.loaded=!1,this.ready=!1}setTile(e){if(e!==this.tile)if(this.tile&&this.tile.removeEventListener(EventType.CHANGE,this.handleTileChange_),this.tile=e,this.loaded=e.getState()===TileState.LOADED,this.loaded)this.uploadTile();else{if(e instanceof ImageTile){const t=e.getImage();t instanceof Image&&!t.crossOrigin&&(t.crossOrigin="anonymous")}e.addEventListener(EventType.CHANGE,this.handleTileChange_)}}uploadTile(){abstract()}setReady(){this.ready=!0,this.dispatchEvent(EventType.CHANGE)}handleTileChange_(){this.tile.getState()===TileState.LOADED&&(this.loaded=!0,this.uploadTile())}disposeInternal(){this.tile.removeEventListener(EventType.CHANGE,this.handleTileChange_)}}export default BaseTileRepresentation;