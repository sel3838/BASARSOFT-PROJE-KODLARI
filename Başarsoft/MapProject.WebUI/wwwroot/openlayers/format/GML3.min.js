import GML2 from"./GML2.js";import GMLBase,{GMLNS}from"./GMLBase.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPolygon from"../geom/MultiPolygon.js";import Polygon from"../geom/Polygon.js";import{OBJECT_PROPERTY_NODE_FACTORY,XML_SCHEMA_INSTANCE_URI,createElementNS,getAllTextContent,makeArrayExtender,makeArrayPusher,makeChildAppender,makeReplacer,makeSimpleNodeFactory,parseNode,pushParseAndPop,pushSerializeAndPop}from"../xml.js";import{createOrUpdate}from"../extent.js";import{extend}from"../array.js";import{get as getProjection}from"../proj.js";import{readNonNegativeIntegerString,writeStringTextNode}from"./xsd.js";import{transformExtentWithOptions,transformGeometryWithOptions}from"./Feature.js";const schemaLocation=GMLNS+" http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/1.0.0/gmlsf.xsd",MULTIGEOMETRY_TO_MEMBER_NODENAME={MultiLineString:"lineStringMember",MultiCurve:"curveMember",MultiPolygon:"polygonMember",MultiSurface:"surfaceMember"};class GML3 extends GMLBase{constructor(e){super(e=e||{}),this.surface_=void 0!==e.surface&&e.surface,this.curve_=void 0!==e.curve&&e.curve,this.multiCurve_=void 0===e.multiCurve||e.multiCurve,this.multiSurface_=void 0===e.multiSurface||e.multiSurface,this.schemaLocation=e.schemaLocation||schemaLocation,this.hasZ=void 0!==e.hasZ&&e.hasZ}readMultiCurve(e,t){e=pushParseAndPop([],this.MULTICURVE_PARSERS,e,t,this);if(e)return new MultiLineString(e)}readFlatCurveRing(e,t){const r=pushParseAndPop([],this.MULTICURVE_PARSERS,e,t,this);var i=[];for(let e=0,t=r.length;e<t;++e)extend(i,r[e].getFlatCoordinates());return i}readMultiSurface(e,t){e=pushParseAndPop([],this.MULTISURFACE_PARSERS,e,t,this);if(e)return new MultiPolygon(e)}curveMemberParser(e,t){parseNode(this.CURVEMEMBER_PARSERS,e,t,this)}surfaceMemberParser(e,t){parseNode(this.SURFACEMEMBER_PARSERS,e,t,this)}readPatch(e,t){return pushParseAndPop([null],this.PATCHES_PARSERS,e,t,this)}readSegment(e,t){return pushParseAndPop([],this.SEGMENTS_PARSERS,e,t,this)}readPolygonPatch(e,t){return pushParseAndPop([null],this.FLAT_LINEAR_RINGS_PARSERS,e,t,this)}readLineStringSegment(e,t){return pushParseAndPop([null],this.GEOMETRY_FLAT_COORDINATES_PARSERS,e,t,this)}interiorParser(e,t){e=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(e){const r=t[t.length-1];r.push(e)}}exteriorParser(e,t){e=pushParseAndPop(void 0,this.RING_PARSERS,e,t,this);if(e){const r=t[t.length-1];r[0]=e}}readSurface(e,t){var r=pushParseAndPop([null],this.SURFACE_PARSERS,e,t,this);if(r&&r[0]){var i=r[0];const n=[i.length];let e,t;for(e=1,t=r.length;e<t;++e)extend(i,r[e]),n.push(i.length);return new Polygon(i,"XYZ",n)}}readCurve(e,t){e=pushParseAndPop([null],this.CURVE_PARSERS,e,t,this);if(e)return new LineString(e,"XYZ")}readEnvelope(e,t){e=pushParseAndPop([null],this.ENVELOPE_PARSERS,e,t,this);return createOrUpdate(e[1][0],e[1][1],e[2][0],e[2][1])}readFlatPos(t,r){let e=getAllTextContent(t,!1);const i=/^\s*([+\-]?\d*\.?\d+(?:[eE][+\-]?\d+)?)\s*/,n=[];for(var o;o=i.exec(e);)n.push(parseFloat(o[1])),e=e.substr(o[0].length);if(""===e){t=r[0].srsName;let e="enu";if(t){const p=getProjection(t);e=p.getAxisOrientation()}if("neu"===e){let e,t;for(e=0,t=n.length;e<t;e+=3){var a=n[e],s=n[e+1];n[e]=s,n[e+1]=a}}r=n.length;if(2==r&&n.push(0),0!==r)return n}}readFlatPosList(e,t){const r=getAllTextContent(e,!1).replace(/^\s*|\s*$/g,"");var t=t[0],i=t.srsName,t=t.srsDimension;let n="enu";if(i){const u=getProjection(i);n=u.getAxisOrientation()}var o,a,s,p=r.split(/\s+/);let l=2;e.getAttribute("srsDimension")?l=readNonNegativeIntegerString(e.getAttribute("srsDimension")):e.getAttribute("dimension")?l=readNonNegativeIntegerString(e.getAttribute("dimension")):e.parentNode.getAttribute("srsDimension")?l=readNonNegativeIntegerString(e.parentNode.getAttribute("srsDimension")):t&&(l=readNonNegativeIntegerString(t));const m=[];for(let e=0,t=p.length;e<t;e+=l)o=parseFloat(p[e]),a=parseFloat(p[e+1]),s=3===l?parseFloat(p[e+2]):0,"en"===n.substr(0,2)?m.push(o,a,s):m.push(a,o,s);return m}writePos_(e,t,r){var r=r[r.length-1],i=r.hasZ,r=(e.setAttribute("srsDimension",i?"3":"2"),r.srsName);let n="enu";r&&(n=getProjection(r).getAxisOrientation());r=t.getCoordinates();let o;o="en"===n.substr(0,2)?r[0]+" "+r[1]:r[1]+" "+r[0],i&&(t=r[2]||0,o+=" "+t),writeStringTextNode(e,o)}getCoords_(e,t,r){let i="enu",n="en"===(i=t?getProjection(t).getAxisOrientation():i).substr(0,2)?e[0]+" "+e[1]:e[1]+" "+e[0];return r&&(t=e[2]||0,n+=" "+t),n}writePosList_(e,t,r){var i,r=r[r.length-1],n=r.hasZ,o=(e.setAttribute("srsDimension",n?"3":"2"),r.srsName),a=t.getCoordinates(),s=a.length;const p=new Array(s);for(let e=0;e<s;++e)i=a[e],p[e]=this.getCoords_(i,o,n);writeStringTextNode(e,p.join(" "))}writePoint(e,t,r){var i=r[r.length-1].srsName,i=(i&&e.setAttribute("srsName",i),createElementNS(e.namespaceURI,"pos"));e.appendChild(i),this.writePos_(i,t,r)}writeEnvelope(e,t,r){var i=r[r.length-1].srsName,i=(i&&e.setAttribute("srsName",i),[t[0]+" "+t[1],t[2]+" "+t[3]]);pushSerializeAndPop({node:e},this.ENVELOPE_SERIALIZERS,OBJECT_PROPERTY_NODE_FACTORY,i,r,["lowerCorner","upperCorner"],this)}writeLinearRing(e,t,r){var i=r[r.length-1].srsName,i=(i&&e.setAttribute("srsName",i),createElementNS(e.namespaceURI,"posList"));e.appendChild(i),this.writePosList_(i,t,r)}RING_NODE_FACTORY_(e,t,r){const i=t[t.length-1];var t=i.node,n=i.exteriorWritten;return void 0===n&&(i.exteriorWritten=!0),createElementNS(t.namespaceURI,void 0!==n?"interior":"exterior")}writeSurfaceOrPolygon(e,t,r){var i,n=r[r.length-1],o=n.hasZ,n=n.srsName;"PolygonPatch"!==e.nodeName&&n&&e.setAttribute("srsName",n),"Polygon"===e.nodeName||"PolygonPatch"===e.nodeName?(i=t.getLinearRings(),pushSerializeAndPop({node:e,hasZ:o,srsName:n},this.RING_SERIALIZERS,this.RING_NODE_FACTORY_,i,r,void 0,this)):"Surface"===e.nodeName&&(o=createElementNS(e.namespaceURI,"patches"),e.appendChild(o),this.writeSurfacePatches_(o,t,r))}writeCurveOrLineString(e,t,r){var i=r[r.length-1].srsName;"LineStringSegment"!==e.nodeName&&i&&e.setAttribute("srsName",i),"LineString"===e.nodeName||"LineStringSegment"===e.nodeName?(i=createElementNS(e.namespaceURI,"posList"),e.appendChild(i),this.writePosList_(i,t,r)):"Curve"===e.nodeName&&(i=createElementNS(e.namespaceURI,"segments"),e.appendChild(i),this.writeCurveSegments_(i,t,r))}writeMultiSurfaceOrPolygon(e,t,r){var i=r[r.length-1],n=i.hasZ,o=i.srsName,i=i.surface,t=(o&&e.setAttribute("srsName",o),t.getPolygons());pushSerializeAndPop({node:e,hasZ:n,srsName:o,surface:i},this.SURFACEORPOLYGONMEMBER_SERIALIZERS,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,t,r,void 0,this)}writeMultiPoint(e,t,r){var i=r[r.length-1],n=i.srsName,i=i.hasZ,t=(n&&e.setAttribute("srsName",n),t.getPoints());pushSerializeAndPop({node:e,hasZ:i,srsName:n},this.POINTMEMBER_SERIALIZERS,makeSimpleNodeFactory("pointMember"),t,r,void 0,this)}writeMultiCurveOrLineString(e,t,r){var i=r[r.length-1],n=i.hasZ,o=i.srsName,i=i.curve,t=(o&&e.setAttribute("srsName",o),t.getLineStrings());pushSerializeAndPop({node:e,hasZ:n,srsName:o,curve:i},this.LINESTRINGORCURVEMEMBER_SERIALIZERS,this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_,t,r,void 0,this)}writeRing(e,t,r){var i=createElementNS(e.namespaceURI,"LinearRing");e.appendChild(i),this.writeLinearRing(i,t,r)}writeSurfaceOrPolygonMember(e,t,r){var i=this.GEOMETRY_NODE_FACTORY_(t,r);i&&(e.appendChild(i),this.writeSurfaceOrPolygon(i,t,r))}writePointMember(e,t,r){var i=createElementNS(e.namespaceURI,"Point");e.appendChild(i),this.writePoint(i,t,r)}writeLineStringOrCurveMember(e,t,r){var i=this.GEOMETRY_NODE_FACTORY_(t,r);i&&(e.appendChild(i),this.writeCurveOrLineString(i,t,r))}writeSurfacePatches_(e,t,r){var i=createElementNS(e.namespaceURI,"PolygonPatch");e.appendChild(i),this.writeSurfaceOrPolygon(i,t,r)}writeCurveSegments_(e,t,r){var i=createElementNS(e.namespaceURI,"LineStringSegment");e.appendChild(i),this.writeCurveOrLineString(i,t,r)}writeGeometryElement(e,t,r){var i=r[r.length-1];const n=Object.assign({},i);n.node=e;let o;o=Array.isArray(t)?transformExtentWithOptions(t,i):transformGeometryWithOptions(t,!0,i),pushSerializeAndPop(n,this.GEOMETRY_SERIALIZERS,this.GEOMETRY_NODE_FACTORY_,[o],r,void 0,this)}writeFeatureElement(e,t,r){var i=t.getId();i&&e.setAttribute("fid",i);const n=r[r.length-1];var o=n.featureNS,a=t.getGeometryName();n.serializers||(n.serializers={},n.serializers[o]={});const s=[],p=[];if(t.hasProperties()){var l=t.getProperties();for(const h in l){var m=l[h];null!==m&&(s.push(h),p.push(m),h==a||"function"==typeof m.getSimplifiedGeometry?h in n.serializers[o]||(n.serializers[o][h]=makeChildAppender(this.writeGeometryElement,this)):h in n.serializers[o]||(n.serializers[o][h]=makeChildAppender(writeStringTextNode)))}}const u=Object.assign({},n);u.node=e,pushSerializeAndPop(u,n.serializers,makeSimpleNodeFactory(void 0,o),p,r,s)}writeFeatureMembers_(e,t,r){var i=r[r.length-1],n=i.featureType,o=i.featureNS;const a={},s=(a[o]={},a[o][n]=makeChildAppender(this.writeFeatureElement,this),Object.assign({},i));s.node=e,pushSerializeAndPop(s,a,makeSimpleNodeFactory(n,o),t,r)}MULTIGEOMETRY_MEMBER_NODE_FACTORY_(e,t,r){t=t[t.length-1].node;return createElementNS(this.namespace,MULTIGEOMETRY_TO_MEMBER_NODENAME[t.nodeName])}GEOMETRY_NODE_FACTORY_(e,t,r){var t=t[t.length-1],i=t.multiSurface,n=t.surface,o=t.curve,t=t.multiCurve;return Array.isArray(e)?r="Envelope":"MultiPolygon"===(r=e.getType())&&!0===i?r="MultiSurface":"Polygon"===r&&!0===n?r="Surface":"LineString"===r&&!0===o?r="Curve":"MultiLineString"===r&&!0===t&&(r="MultiCurve"),createElementNS(this.namespace,r)}writeGeometryNode(e,t){t=this.adaptOptions(t);var r=createElementNS(this.namespace,"geom"),i={node:r,hasZ:this.hasZ,srsName:this.srsName,curve:this.curve_,surface:this.surface_,multiSurface:this.multiSurface_,multiCurve:this.multiCurve_};return t&&Object.assign(i,t),this.writeGeometryElement(r,e,[i]),r}writeFeaturesNode(e,t){t=this.adaptOptions(t);const r=createElementNS(this.namespace,"featureMembers");r.setAttributeNS(XML_SCHEMA_INSTANCE_URI,"xsi:schemaLocation",this.schemaLocation);var i={srsName:this.srsName,hasZ:this.hasZ,curve:this.curve_,surface:this.surface_,multiSurface:this.multiSurface_,multiCurve:this.multiCurve_,featureNS:this.featureNS,featureType:this.featureType};return t&&Object.assign(i,t),this.writeFeatureMembers_(r,e,[i]),r}}GML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS={"http://www.opengis.net/gml":{pos:makeReplacer(GML3.prototype.readFlatPos),posList:makeReplacer(GML3.prototype.readFlatPosList),coordinates:makeReplacer(GML2.prototype.readFlatCoordinates)}},GML3.prototype.FLAT_LINEAR_RINGS_PARSERS={"http://www.opengis.net/gml":{interior:GML3.prototype.interiorParser,exterior:GML3.prototype.exteriorParser}},GML3.prototype.GEOMETRY_PARSERS={"http://www.opengis.net/gml":{Point:makeReplacer(GMLBase.prototype.readPoint),MultiPoint:makeReplacer(GMLBase.prototype.readMultiPoint),LineString:makeReplacer(GMLBase.prototype.readLineString),MultiLineString:makeReplacer(GMLBase.prototype.readMultiLineString),LinearRing:makeReplacer(GMLBase.prototype.readLinearRing),Polygon:makeReplacer(GMLBase.prototype.readPolygon),MultiPolygon:makeReplacer(GMLBase.prototype.readMultiPolygon),Surface:makeReplacer(GML3.prototype.readSurface),MultiSurface:makeReplacer(GML3.prototype.readMultiSurface),Curve:makeReplacer(GML3.prototype.readCurve),MultiCurve:makeReplacer(GML3.prototype.readMultiCurve),Envelope:makeReplacer(GML3.prototype.readEnvelope)}},GML3.prototype.MULTICURVE_PARSERS={"http://www.opengis.net/gml":{curveMember:makeArrayPusher(GML3.prototype.curveMemberParser),curveMembers:makeArrayPusher(GML3.prototype.curveMemberParser)}},GML3.prototype.MULTISURFACE_PARSERS={"http://www.opengis.net/gml":{surfaceMember:makeArrayPusher(GML3.prototype.surfaceMemberParser),surfaceMembers:makeArrayPusher(GML3.prototype.surfaceMemberParser)}},GML3.prototype.CURVEMEMBER_PARSERS={"http://www.opengis.net/gml":{LineString:makeArrayPusher(GMLBase.prototype.readLineString),Curve:makeArrayPusher(GML3.prototype.readCurve)}},GML3.prototype.SURFACEMEMBER_PARSERS={"http://www.opengis.net/gml":{Polygon:makeArrayPusher(GMLBase.prototype.readPolygon),Surface:makeArrayPusher(GML3.prototype.readSurface)}},GML3.prototype.SURFACE_PARSERS={"http://www.opengis.net/gml":{patches:makeReplacer(GML3.prototype.readPatch)}},GML3.prototype.CURVE_PARSERS={"http://www.opengis.net/gml":{segments:makeReplacer(GML3.prototype.readSegment)}},GML3.prototype.ENVELOPE_PARSERS={"http://www.opengis.net/gml":{lowerCorner:makeArrayPusher(GML3.prototype.readFlatPosList),upperCorner:makeArrayPusher(GML3.prototype.readFlatPosList)}},GML3.prototype.PATCHES_PARSERS={"http://www.opengis.net/gml":{PolygonPatch:makeReplacer(GML3.prototype.readPolygonPatch)}},GML3.prototype.SEGMENTS_PARSERS={"http://www.opengis.net/gml":{LineStringSegment:makeArrayExtender(GML3.prototype.readLineStringSegment)}},GMLBase.prototype.RING_PARSERS={"http://www.opengis.net/gml":{LinearRing:makeReplacer(GMLBase.prototype.readFlatLinearRing),Ring:makeReplacer(GML3.prototype.readFlatCurveRing)}},GML3.prototype.writeFeatures,GML3.prototype.RING_SERIALIZERS={"http://www.opengis.net/gml":{exterior:makeChildAppender(GML3.prototype.writeRing),interior:makeChildAppender(GML3.prototype.writeRing)}},GML3.prototype.ENVELOPE_SERIALIZERS={"http://www.opengis.net/gml":{lowerCorner:makeChildAppender(writeStringTextNode),upperCorner:makeChildAppender(writeStringTextNode)}},GML3.prototype.SURFACEORPOLYGONMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{surfaceMember:makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember),polygonMember:makeChildAppender(GML3.prototype.writeSurfaceOrPolygonMember)}},GML3.prototype.POINTMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{pointMember:makeChildAppender(GML3.prototype.writePointMember)}},GML3.prototype.LINESTRINGORCURVEMEMBER_SERIALIZERS={"http://www.opengis.net/gml":{lineStringMember:makeChildAppender(GML3.prototype.writeLineStringOrCurveMember),curveMember:makeChildAppender(GML3.prototype.writeLineStringOrCurveMember)}},GML3.prototype.GEOMETRY_SERIALIZERS={"http://www.opengis.net/gml":{Curve:makeChildAppender(GML3.prototype.writeCurveOrLineString),MultiCurve:makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),Point:makeChildAppender(GML3.prototype.writePoint),MultiPoint:makeChildAppender(GML3.prototype.writeMultiPoint),LineString:makeChildAppender(GML3.prototype.writeCurveOrLineString),MultiLineString:makeChildAppender(GML3.prototype.writeMultiCurveOrLineString),LinearRing:makeChildAppender(GML3.prototype.writeLinearRing),Polygon:makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),MultiPolygon:makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),Surface:makeChildAppender(GML3.prototype.writeSurfaceOrPolygon),MultiSurface:makeChildAppender(GML3.prototype.writeMultiSurfaceOrPolygon),Envelope:makeChildAppender(GML3.prototype.writeEnvelope)}};export default GML3;