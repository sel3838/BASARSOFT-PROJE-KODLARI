import Feature from"../Feature.js";import FeatureFormat,{transformGeometryWithOptions}from"./Feature.js";import GeometryCollection from"../geom/GeometryCollection.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import{get as getProjection}from"../proj.js";import SimpleGeometry from"../geom/SimpleGeometry.js";const WKBGeometryType={POINT:1,LINE_STRING:2,POLYGON:3,MULTI_POINT:4,MULTI_LINE_STRING:5,MULTI_POLYGON:6,GEOMETRY_COLLECTION:7,POLYHEDRAL_SURFACE:15,TIN:16,TRIANGLE:17};class WkbReader{constructor(e){this.view_=e,this.pos_=0,this.initialized_=!1,this.isLittleEndian_=!1,this.hasZ_=!1,this.hasM_=!1,this.srid_=null,this.layout_="XY"}readUint8(){return this.view_.getUint8(this.pos_++)}readUint32(e){return this.view_.getUint32((this.pos_+=4)-4,void 0!==e?e:this.isLittleEndian_)}readDouble(e){return this.view_.getFloat64((this.pos_+=8)-8,void 0!==e?e:this.isLittleEndian_)}readPoint(){const e=[];return e.push(this.readDouble()),e.push(this.readDouble()),this.hasZ_&&e.push(this.readDouble()),this.hasM_&&e.push(this.readDouble()),e}readLineString(){var t=this.readUint32();const i=[];for(let e=0;e<t;e++)i.push(this.readPoint());return i}readPolygon(){var t=this.readUint32();const i=[];for(let e=0;e<t;e++)i.push(this.readLineString());return i}readWkbHeader(e){var t=0<this.readUint8(),i=this.readUint32(t),r=Math.floor((268435455&i)/1e3),o=Boolean(2147483648&i)||1===r||3===r,r=Boolean(1073741824&i)||2===r||3===r,n=Boolean(536870912&i),i=(268435455&i)%1e3,s=["XY",o?"Z":"",r?"M":""].join(""),n=n?this.readUint32(t):null;if(void 0!==e&&e!==i)throw new Error("Unexpected WKB geometry type "+i);if(this.initialized_){if(this.isLittleEndian_!==t)throw new Error("Inconsistent endian");if(this.layout_!==s)throw new Error("Inconsistent geometry layout");if(n&&this.srid_!==n)throw new Error("Inconsistent coordinate system (SRID)")}else this.isLittleEndian_=t,this.hasZ_=o,this.hasM_=r,this.layout_=s,this.srid_=n,this.initialized_=!0;return i}readWkbPayload(e){switch(e){case WKBGeometryType.POINT:return this.readPoint();case WKBGeometryType.LINE_STRING:return this.readLineString();case WKBGeometryType.POLYGON:case WKBGeometryType.TRIANGLE:return this.readPolygon();case WKBGeometryType.MULTI_POINT:return this.readMultiPoint();case WKBGeometryType.MULTI_LINE_STRING:return this.readMultiLineString();case WKBGeometryType.MULTI_POLYGON:case WKBGeometryType.POLYHEDRAL_SURFACE:case WKBGeometryType.TIN:return this.readMultiPolygon();case WKBGeometryType.GEOMETRY_COLLECTION:return this.readGeometryCollection();default:throw new Error("Unsupported WKB geometry type "+e+" is found")}}readWkbBlock(e){return this.readWkbPayload(this.readWkbHeader(e))}readWkbCollection(t,i){var r=this.readUint32();const o=[];for(let e=0;e<r;e++){var n=t.call(this,i);n&&o.push(n)}return o}readMultiPoint(){return this.readWkbCollection(this.readWkbBlock,WKBGeometryType.POINT)}readMultiLineString(){return this.readWkbCollection(this.readWkbBlock,WKBGeometryType.LINE_STRING)}readMultiPolygon(){return this.readWkbCollection(this.readWkbBlock,WKBGeometryType.POLYGON)}readGeometryCollection(){return this.readWkbCollection(this.readGeometry)}readGeometry(){var e=this.readWkbHeader(),t=this.readWkbPayload(e);switch(e){case WKBGeometryType.POINT:return new Point(t,this.layout_);case WKBGeometryType.LINE_STRING:return new LineString(t,this.layout_);case WKBGeometryType.POLYGON:case WKBGeometryType.TRIANGLE:return new Polygon(t,this.layout_);case WKBGeometryType.MULTI_POINT:return new MultiPoint(t,this.layout_);case WKBGeometryType.MULTI_LINE_STRING:return new MultiLineString(t,this.layout_);case WKBGeometryType.MULTI_POLYGON:case WKBGeometryType.POLYHEDRAL_SURFACE:case WKBGeometryType.TIN:return new MultiPolygon(t,this.layout_);case WKBGeometryType.GEOMETRY_COLLECTION:return new GeometryCollection(t);default:return null}}getSrid(){return this.srid_}}class WkbWriter{constructor(e){this.layout_=(e=e||{}).layout,this.isLittleEndian_=!1!==e.littleEndian,this.isEWKB_=!1!==e.ewkb,this.writeQueue_=[],this.nodata_=Object.assign({X:0,Y:0,Z:0,M:0},e.nodata)}writeUint8(e){this.writeQueue_.push([1,e])}writeUint32(e){this.writeQueue_.push([4,e])}writeDouble(e){this.writeQueue_.push([8,e])}writePoint(i,e){var t=Object.assign.apply(null,e.split("").map((e,t)=>({[e]:i[t]})));for(const r of this.layout_)this.writeDouble((r in t?t:this.nodata_)[r])}writeLineString(t,i){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writePoint(t[e],i)}writePolygon(t,i){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writeLineString(t[e],i)}writeWkbHeader(e,t){e%=1e3,this.layout_.includes("Z")&&(e+=this.isEWKB_?2147483648:1e3),this.layout_.includes("M")&&(e+=this.isEWKB_?1073741824:2e3),this.isEWKB_&&Number.isInteger(t)&&(e|=536870912),this.writeUint8(this.isLittleEndian_?1:0),this.writeUint32(e),this.isEWKB_&&Number.isInteger(t)&&this.writeUint32(t)}writeMultiPoint(t,i){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writeWkbHeader(1),this.writePoint(t[e],i)}writeMultiLineString(t,i){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writeWkbHeader(2),this.writeLineString(t[e],i)}writeMultiPolygon(t,i){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writeWkbHeader(3),this.writePolygon(t[e],i)}writeGeometryCollection(t){this.writeUint32(t.length);for(let e=0;e<t.length;e++)this.writeGeometry(t[e])}findMinimumLayout(e,t="XYZM"){var i,r;if(e instanceof SimpleGeometry)return(i=e.getLayout())===(r=t)?i:"XYZM"===i?r:"XYZM"===r?i:"XY";if(e instanceof GeometryCollection){var o=e.getGeometriesArray();for(let e=0;e<o.length&&"XY"!==t;e++)t=this.findMinimumLayout(o[e],t)}return t}writeGeometry(e,t){var i={Point:WKBGeometryType.POINT,LineString:WKBGeometryType.LINE_STRING,Polygon:WKBGeometryType.POLYGON,MultiPoint:WKBGeometryType.MULTI_POINT,MultiLineString:WKBGeometryType.MULTI_LINE_STRING,MultiPolygon:WKBGeometryType.MULTI_POLYGON,GeometryCollection:WKBGeometryType.GEOMETRY_COLLECTION},r=e.getType(),i=i[r];if(!i)throw new Error("GeometryType "+r+" is not supported");if(this.layout_||(this.layout_=this.findMinimumLayout(e)),this.writeWkbHeader(i,t),e instanceof SimpleGeometry){const o={Point:this.writePoint,LineString:this.writeLineString,Polygon:this.writePolygon,MultiPoint:this.writeMultiPoint,MultiLineString:this.writeMultiLineString,MultiPolygon:this.writeMultiPolygon};o[r].call(this,e.getCoordinates(),e.getLayout())}else e instanceof GeometryCollection&&this.writeGeometryCollection(e.getGeometriesArray())}getBuffer(){var e=this.writeQueue_.reduce((e,t)=>e+t[0],0),e=new ArrayBuffer(e);const t=new DataView(e);let i=0;return this.writeQueue_.forEach(e=>{switch(e[0]){case 1:t.setUint8(i,e[1]);break;case 4:t.setUint32(i,e[1],this.isLittleEndian_);break;case 8:t.setFloat64(i,e[1],this.isLittleEndian_)}i+=e[0]}),e}}class WKB extends FeatureFormat{constructor(e){super(),e=e||{},this.splitCollection=Boolean(e.splitCollection),this.viewCache_=null,this.hex_=!1!==e.hex,this.littleEndian_=!1!==e.littleEndian,this.ewkb_=!1!==e.ewkb,this.layout_=e.geometryLayout,this.nodataZ_=e.nodataZ||0,this.nodataM_=e.nodataM||0,this.srid_=e.srid}getType(){return this.hex_?"text":"arraybuffer"}readFeature(e,t){return new Feature({geometry:this.readGeometry(e,t)})}readFeatures(e,t){let i=[];const r=this.readGeometry(e,t);return(i=this.splitCollection&&r instanceof GeometryCollection?r.getGeometriesArray():[r]).map(e=>new Feature({geometry:e}))}readGeometry(e,t){var i=getDataView(e);if(!i)return null;const r=new WkbReader(i);var o=r.readGeometry();return this.viewCache_=i,t=this.getReadOptions(e,t),this.viewCache_=null,transformGeometryWithOptions(o,!1,t)}readProjection(e){e=this.viewCache_||getDataView(e);if(e){const t=new WkbReader(e);return t.readWkbHeader(),t.getSrid()&&getProjection("EPSG:"+t.getSrid())||void 0}}writeFeature(e,t){return this.writeGeometry(e.getGeometry(),t)}writeFeatures(e,t){return this.writeGeometry(new GeometryCollection(e.map(e=>e.getGeometry())),t)}writeGeometry(e,t){t=this.adaptOptions(t);const i=new WkbWriter({layout:this.layout_,littleEndian:this.littleEndian_,ewkb:this.ewkb_,nodata:{Z:this.nodataZ_,M:this.nodataM_}});let r=Number.isInteger(this.srid_)?Number(this.srid_):null;if(!1!==this.srid_&&!Number.isInteger(this.srid_)){const o=t.dataProjection&&getProjection(t.dataProjection);if(o){const n=o.getCode();n.startsWith("EPSG:")&&(r=Number(n.substring(5)))}}i.writeGeometry(transformGeometryWithOptions(e,!0,t),r);e=i.getBuffer();return this.hex_?encodeHexString(e):e}}function encodeHexString(e){const t=new Uint8Array(e);return Array.from(t.values()).map(e=>(e<16?"0":"")+Number(e).toString(16).toUpperCase()).join("")}function decodeHexString(t){const i=new Uint8Array(t.length/2);for(let e=0;e<t.length/2;e++)i[e]=parseInt(t.substr(2*e,2),16);return new DataView(i.buffer)}function getDataView(e){return"string"==typeof e?decodeHexString(e):ArrayBuffer.isView(e)?e instanceof DataView?e:new DataView(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer?new DataView(e):null}export default WKB;