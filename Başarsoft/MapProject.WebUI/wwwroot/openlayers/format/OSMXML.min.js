import Feature from"../Feature.js";import LineString from"../geom/LineString.js";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import XMLFeature from"./XMLFeature.js";import{extend}from"../array.js";import{get as getProjection}from"../proj.js";import{isEmpty}from"../obj.js";import{makeStructureNS,pushParseAndPop}from"../xml.js";import{transformGeometryWithOptions}from"./Feature.js";const NAMESPACE_URIS=[null],WAY_PARSERS=makeStructureNS(NAMESPACE_URIS,{nd:readNd,tag:readTag}),PARSERS=makeStructureNS(NAMESPACE_URIS,{node:readNode,way:readWay});class OSMXML extends XMLFeature{constructor(){super(),this.dataProjection=getProjection("EPSG:4326")}readFeaturesFromNode(t,r){if(r=this.getReadOptions(t,r),"osm"==t.localName){const n=pushParseAndPop({nodes:{},ways:[],features:[]},PARSERS,t,[r]);for(let e=0;e<n.ways.length;e++){var o=n.ways[e],s=o.flatCoordinates;if(!s.length)for(let t=0,e=o.ndrefs.length;t<e;t++){var a=n.nodes[o.ndrefs[t]];extend(s,a)}let t;t=o.ndrefs[0]==o.ndrefs[o.ndrefs.length-1]?new Polygon(s,"XY",[s.length]):new LineString(s,"XY"),transformGeometryWithOptions(t,!1,r);const i=new Feature(t);void 0!==o.id&&i.setId(o.id),i.setProperties(o.tags,!0),n.features.push(i)}if(n.features)return n.features}return[]}}const NODE_PARSERS=makeStructureNS(NAMESPACE_URIS,{tag:readTag});function readNode(t,e){var r=e[0];const o=e[e.length-1];var s=t.getAttribute("id"),a=[parseFloat(t.getAttribute("lon")),parseFloat(t.getAttribute("lat"))],t=(o.nodes[s]=a,pushParseAndPop({tags:{}},NODE_PARSERS,t,e));if(!isEmpty(t.tags)){e=new Point(a);transformGeometryWithOptions(e,!1,r);const n=new Feature(e);void 0!==s&&n.setId(s),n.setProperties(t.tags,!0),o.features.push(n)}}function readWay(t,e){var r=t.getAttribute("id"),r=pushParseAndPop({id:r,ndrefs:[],flatCoordinates:[],tags:{}},WAY_PARSERS,t,e);const o=e[e.length-1];o.ways.push(r)}function readNd(t,e){const r=e[e.length-1];r.ndrefs.push(t.getAttribute("ref")),t.hasAttribute("lon")&&t.hasAttribute("lat")&&(r.flatCoordinates.push(parseFloat(t.getAttribute("lon"))),r.flatCoordinates.push(parseFloat(t.getAttribute("lat"))))}function readTag(t,e){const r=e[e.length-1];r.tags[t.getAttribute("k")]=t.getAttribute("v")}export default OSMXML;