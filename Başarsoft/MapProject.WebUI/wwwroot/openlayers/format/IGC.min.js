import Feature from"../Feature.js";import LineString from"../geom/LineString.js";import TextFeature from"./TextFeature.js";import{get as getProjection}from"../proj.js";import{transformGeometryWithOptions}from"./Feature.js";const B_RECORD_RE=/^B(\d{2})(\d{2})(\d{2})(\d{2})(\d{5})([NS])(\d{3})(\d{5})([EW])([AV])(\d{5})(\d{5})/,H_RECORD_RE=/^H.([A-Z]{3}).*?:(.*)/,HFDTE_RECORD_RE=/^HFDTE(\d{2})(\d{2})(\d{2})/,HFDTEDATE_RECORD_RE=/^HFDTEDATE:(\d{2})(\d{2})(\d{2}),(\d{2})/,NEWLINE_RE=/\r\n|\r|\n/;class IGC extends TextFeature{constructor(t){super(),t=t||{},this.dataProjection=getProjection("EPSG:4326"),this.altitudeMode_=t.altitudeMode||"none",this.lad_=!1,this.lod_=!1,this.ladStart_=0,this.ladStop_=0,this.lodStart_=0,this.lodStop_=0}readFeatureFromText(t,e){var a=this.altitudeMode_,r=t.split(NEWLINE_RE);const i={},o=[];let n=2e3,d=0,l=1,_=-1,p,s;for(p=0,s=r.length;p<s;++p){const m=r[p];let s;if("B"==m.charAt(0)){if(s=B_RECORD_RE.exec(m)){var h=parseInt(s[1],10),E=parseInt(s[2],10),R=parseInt(s[3],10);let t=parseInt(s[4],10)+parseInt(s[5],10)/6e4,e=(this.lad_&&(t+=parseInt(m.slice(this.ladStart_,this.ladStop_),10)/6e4/10**(this.ladStop_-this.ladStart_)),"S"==s[6]&&(t=-t),parseInt(s[7],10)+parseInt(s[8],10)/6e4);if(this.lod_&&(e+=parseInt(m.slice(this.lodStart_,this.lodStop_),10)/6e4/10**(this.lodStop_-this.lodStart_)),"W"==s[9]&&(e=-e),o.push(e,t),"none"!=a){let t;t="gps"==a?parseInt(s[11],10):"barometric"==a?parseInt(s[12],10):0,o.push(t)}let r=Date.UTC(n,d,l,h,E,R);r<_&&(r=Date.UTC(n,d,l+1,h,E,R)),o.push(r/1e3),_=r}}else if("H"==m.charAt(0))(s=(s=HFDTEDATE_RECORD_RE.exec(m))||HFDTE_RECORD_RE.exec(m))?(l=parseInt(s[1],10),d=parseInt(s[2],10)-1,n=2e3+parseInt(s[3],10)):(s=H_RECORD_RE.exec(m))&&(i[s[1]]=s[2].trim());else if("I"==m.charAt(0)){var c=parseInt(m.slice(1,3),10);for(let t=0;t<c;t++){var u,D,I=m.slice(7+7*t,10+7*t);"LAD"!==I&&"LOD"!==I||(u=parseInt(m.slice(3+7*t,5+7*t),10)-1,D=parseInt(m.slice(5+7*t,7+7*t),10),"LAD"===I?(this.lad_=!0,this.ladStart_=u,this.ladStop_=D):"LOD"===I&&(this.lod_=!0,this.lodStart_=u,this.lodStop_=D))}}}if(0===o.length)return null;t=new LineString(o,"none"==a?"XYM":"XYZM");const S=new Feature(transformGeometryWithOptions(t,!1,e));return S.setProperties(i,!0),S}readFeaturesFromText(t,e){t=this.readFeatureFromText(t,e);return t?[t]:[]}}export default IGC;