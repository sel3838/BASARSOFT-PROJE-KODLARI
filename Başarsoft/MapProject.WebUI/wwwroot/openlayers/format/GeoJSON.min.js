import Feature from"../Feature.js";import JSONFeature from"./JSONFeature.js";import RenderFeature from"../render/Feature.js";import{createGeometry,createRenderFeature,transformGeometryWithOptions}from"./Feature.js";import{deflateCoordinatesArray,deflateMultiCoordinatesArray}from"../geom/flat/deflate.js";import{getLayoutForStride}from"../geom/SimpleGeometry.js";import{get as getProjection}from"../proj.js";import{isEmpty}from"../obj.js";class GeoJSON extends JSONFeature{constructor(e){e=e||{},super(),this.dataProjection=getProjection(e.dataProjection||"EPSG:4326"),e.featureProjection&&(this.defaultFeatureProjection=getProjection(e.featureProjection)),e.featureClass&&(this.featureClass=e.featureClass),this.geometryName_=e.geometryName,this.extractGeometryName_=e.extractGeometryName,this.supportedMediaTypes=["application/geo+json","application/vnd.geo+json"]}readFeatureFromObject(e,t){let r=null;e=readGeometryInternal((r="Feature"===e.type?e:{type:"Feature",geometry:e,properties:null}).geometry,t);if(this.featureClass===RenderFeature)return createRenderFeature({geometry:e,id:r.id,properties:r.properties},t);const o=new Feature;return this.geometryName_?o.setGeometryName(this.geometryName_):this.extractGeometryName_&&r.geometry_name&&o.setGeometryName(r.geometry_name),o.setGeometry(createGeometry(e,t)),"id"in r&&o.setId(r.id),r.properties&&o.setProperties(r.properties,!0),o}readFeaturesFromObject(e,r){let o=null;if("FeatureCollection"===e.type){o=[];var n=e.features;for(let e=0,t=n.length;e<t;++e){var i=this.readFeatureFromObject(n[e],r);i&&o.push(i)}}else o=[this.readFeatureFromObject(e,r)];return o.flat()}readGeometryFromObject(e,t){return readGeometry(e,t)}readProjectionFromObject(e){e=e.crs;let t;if(e)if("name"==e.type)t=getProjection(e.properties.name);else{if("EPSG"!==e.type)throw new Error("Unknown SRS type");t=getProjection("EPSG:"+e.properties.code)}else t=this.dataProjection;return t}writeFeatureObject(e,t){t=this.adaptOptions(t);const r={type:"Feature",geometry:null,properties:null};var o=e.getId();if(void 0!==o&&(r.id=o),!e.hasProperties())return r;const n=e.getProperties();o=e.getGeometry();return o&&(r.geometry=writeGeometry(o,t),delete n[e.getGeometryName()]),isEmpty(n)||(r.properties=n),r}writeFeaturesObject(r,o){o=this.adaptOptions(o);const n=[];for(let e=0,t=r.length;e<t;++e)n.push(this.writeFeatureObject(r[e],o));return{type:"FeatureCollection",features:n}}writeGeometryObject(e,t){return writeGeometry(e,this.adaptOptions(t))}}function readGeometryInternal(e,t){if(!e)return null;let r;switch(e.type){case"Point":r=readPointGeometry(e);break;case"LineString":r=readLineStringGeometry(e);break;case"Polygon":r=readPolygonGeometry(e);break;case"MultiPoint":r=readMultiPointGeometry(e);break;case"MultiLineString":r=readMultiLineStringGeometry(e);break;case"MultiPolygon":r=readMultiPolygonGeometry(e);break;case"GeometryCollection":r=readGeometryCollectionGeometry(e);break;default:throw new Error("Unsupported GeoJSON type: "+e.type)}return r}function readGeometry(e,t){e=readGeometryInternal(e,t);return createGeometry(e,t)}function readGeometryCollectionGeometry(e,t){return e.geometries.map(function(e){return readGeometryInternal(e,t)})}function readPointGeometry(e){e=e.coordinates;return{type:"Point",flatCoordinates:e,layout:getLayoutForStride(e.length)}}function readLineStringGeometry(e){const t=e.coordinates;e=t.flat();return{type:"LineString",flatCoordinates:e,ends:[e.length],layout:getLayoutForStride(t[0]?.length||2)}}function readMultiLineStringGeometry(e){var e=e.coordinates,t=e[0]?.[0]?.length||2,r=[];return{type:"MultiLineString",flatCoordinates:r,ends:deflateCoordinatesArray(r,0,e,t),layout:getLayoutForStride(t)}}function readMultiPointGeometry(e){const t=e.coordinates;return{type:"MultiPoint",flatCoordinates:t.flat(),layout:getLayoutForStride(t[0]?.length||2)}}function readMultiPolygonGeometry(e){var e=e.coordinates,t=[],r=e[0]?.[0]?.[0].length||2;return{type:"MultiPolygon",flatCoordinates:t,ends:deflateMultiCoordinatesArray(t,0,e,r),layout:getLayoutForStride(r)}}function readPolygonGeometry(e){var e=e.coordinates,t=[],r=e[0]?.[0]?.length;return{type:"Polygon",flatCoordinates:t,ends:deflateCoordinatesArray(t,0,e,r),layout:getLayoutForStride(r)}}function writeGeometry(e,t){var r=(e=transformGeometryWithOptions(e,!0,t)).getType();let o;switch(r){case"Point":o=writePointGeometry(e,t);break;case"LineString":o=writeLineStringGeometry(e,t);break;case"Polygon":o=writePolygonGeometry(e,t);break;case"MultiPoint":o=writeMultiPointGeometry(e,t);break;case"MultiLineString":o=writeMultiLineStringGeometry(e,t);break;case"MultiPolygon":o=writeMultiPolygonGeometry(e,t);break;case"GeometryCollection":o=writeGeometryCollectionGeometry(e,t);break;case"Circle":o={type:"GeometryCollection",geometries:[]};break;default:throw new Error("Unsupported geometry type: "+r)}return o}function writeGeometryCollectionGeometry(e,t){return delete(t=Object.assign({},t)).featureProjection,{type:"GeometryCollection",geometries:e.getGeometriesArray().map(function(e){return writeGeometry(e,t)})}}function writeLineStringGeometry(e,t){return{type:"LineString",coordinates:e.getCoordinates()}}function writeMultiLineStringGeometry(e,t){return{type:"MultiLineString",coordinates:e.getCoordinates()}}function writeMultiPointGeometry(e,t){return{type:"MultiPoint",coordinates:e.getCoordinates()}}function writeMultiPolygonGeometry(e,t){let r;return t&&(r=t.rightHanded),{type:"MultiPolygon",coordinates:e.getCoordinates(r)}}function writePointGeometry(e,t){return{type:"Point",coordinates:e.getCoordinates()}}function writePolygonGeometry(e,t){let r;return t&&(r=t.rightHanded),{type:"Polygon",coordinates:e.getCoordinates(r)}}export default GeoJSON;