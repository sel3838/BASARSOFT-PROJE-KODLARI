import FeatureFormat,{transformGeometryWithOptions}from"./Feature.js";import LineString from"../geom/LineString.js";import MultiLineString from"../geom/MultiLineString.js";import MultiPoint from"../geom/MultiPoint.js";import MultiPolygon from"../geom/MultiPolygon.js";import PBF from"pbf";import Point from"../geom/Point.js";import Polygon from"../geom/Polygon.js";import Projection from"../proj/Projection.js";import RenderFeature from"../render/Feature.js";import{get}from"../proj.js";import{inflateEnds}from"../geom/flat/orient.js";class MVT extends FeatureFormat{constructor(e){super(),e=e||{},this.dataProjection=new Projection({code:"",units:"tile-pixels"}),this.featureClass=e.featureClass||RenderFeature,this.geometryName_=e.geometryName,this.layerName_=e.layerName||"layer",this.layers_=e.layers||null,this.idProperty_=e.idProperty,this.supportedMediaTypes=["application/vnd.mapbox-vector-tile","application/x-protobuf"]}readRawGeometry_(e,t,r,a){e.pos=t.geometry;var i,o=e.readVarint()+e.pos;let n=1,s=0,l=0,u=0,d=0,p=0;for(;e.pos<o;)if(s||(i=e.readVarint(),n=7&i,s=i>>3),s--,1===n||2===n)l+=e.readSVarint(),u+=e.readSVarint(),1===n&&d>p&&(a.push(d),p=d),r.push(l,u),d+=2;else{if(7!==n)throw new Error("Invalid command found in the PBF");d>p&&(r.push(r[p],r[p+1]),d+=2)}d>p&&(a.push(d),p=d)}createFeature_(t,r,a){var i=r.type;if(0===i)return null;let o;const n=r.properties;let s;this.idProperty_?(s=n[this.idProperty_],delete n[this.idProperty_]):s=r.id,n[this.layerName_]=r.layer.name;var l=[],u=[],t=(this.readRawGeometry_(t,r,l,u),getGeometryType(i,u.length));if(this.featureClass===RenderFeature)(o=new this.featureClass(t,l,u,2,n,s)).transform(a.dataProjection);else{let e;e="Polygon"==t?1<(r=inflateEnds(l,u)).length?new MultiPolygon(l,"XY",r):new Polygon(l,"XY",u):"Point"===t?new Point(l,"XY"):"LineString"===t?new LineString(l,"XY"):"MultiPoint"===t?new MultiPoint(l,"XY"):"MultiLineString"===t?new MultiLineString(l,"XY",u):null;const d=this.featureClass;o=new d,this.geometryName_&&o.setGeometryName(this.geometryName_);i=transformGeometryWithOptions(e,!1,a);o.setGeometry(i),void 0!==s&&o.setId(s),o.setProperties(n,!0)}return o}getType(){return"arraybuffer"}readFeatures(e,r){const t=this.layers_,a=(r=this.adaptOptions(r),get(r.dataProjection)),i=(a.setWorldExtent(r.extent),r.dataProjection=a,new PBF(e));var o=i.readFields(layersPBFReader,{});const n=[];for(const d in o)if(!t||t.includes(d)){var s=o[d],l=s?[0,0,s.extent,s.extent]:null;a.setExtent(l);for(let e=0,t=s.length;e<t;++e){var u=readRawFeature(i,s,e),u=this.createFeature_(i,u,r);null!==u&&n.push(u)}}return n}readProjection(e){return this.dataProjection}setLayers(e){this.layers_=e}}function layersPBFReader(e,t,r){if(3===e){const a={keys:[],values:[],features:[]};e=r.readVarint()+r.pos;r.readFields(layerPBFReader,a,e),a.length=a.features.length,a.length&&(t[a.name]=a)}}function layerPBFReader(t,r,a){if(15===t)r.version=a.readVarint();else if(1===t)r.name=a.readString();else if(5===t)r.extent=a.readVarint();else if(2===t)r.features.push(a.pos);else if(3===t)r.keys.push(a.readString());else if(4===t){let e=null;for(var i=a.readVarint()+a.pos;a.pos<i;)t=a.readVarint()>>3,e=1===t?a.readString():2===t?a.readFloat():3===t?a.readDouble():4===t?a.readVarint64():5===t?a.readVarint():6===t?a.readSVarint():7===t?a.readBoolean():null;r.values.push(e)}}function featurePBFReader(e,t,r){if(1==e)t.id=r.readVarint();else if(2==e)for(var a=r.readVarint()+r.pos;r.pos<a;){var i=t.layer.keys[r.readVarint()],o=t.layer.values[r.readVarint()];t.properties[i]=o}else 3==e?t.type=r.readVarint():4==e&&(t.geometry=r.pos)}function readRawFeature(e,t,r){e.pos=t.features[r];r=e.readVarint()+e.pos,t={layer:t,type:0,properties:{}};return e.readFields(featurePBFReader,t,r),t}function getGeometryType(e,t){let r;return 1===e?r=1===t?"Point":"MultiPoint":2===e?r=1===t?"LineString":"MultiLineString":3===e&&(r="Polygon"),r}export default MVT;