function clamp(t,e,r){return Math.min(Math.max(t,e),r)}function squaredSegmentDistance(t,e,r,n,o,a){var u,i=o-r,l=a-n;return 0==i&&0==l||(1<(u=((t-r)*i+(e-n)*l)/(i*i+l*l))?(r=o,n=a):0<u&&(r+=i*u,n+=l*u)),squaredDistance(t,e,r,n)}function squaredDistance(t,e,r,n){r-=t,t=n-e;return r*r+t*t}function solveLinearSystem(o){var a=o.length;for(let n=0;n<a;n++){let e=n,r=Math.abs(o[n][n]);for(let t=n+1;t<a;t++){var u=Math.abs(o[t][n]);u>r&&(r=u,e=t)}if(0===r)return null;var t=o[e];o[e]=o[n],o[n]=t;for(let e=n+1;e<a;e++){var i=-o[e][n]/o[n][n];for(let t=n;t<a+1;t++)n==t?o[e][t]=0:o[e][t]+=i*o[n][t]}}const r=new Array(a);for(let e=a-1;0<=e;e--){r[e]=o[e][a]/o[e][e];for(let t=e-1;0<=t;t--)o[t][a]-=o[t][e]*r[e]}return r}function toDegrees(t){return 180*t/Math.PI}function toRadians(t){return t*Math.PI/180}function modulo(t,e){t%=e;return t*e<0?t+e:t}function lerp(t,e,r){return t+r*(e-t)}function toFixed(t,e){e=Math.pow(10,e);return Math.round(t*e)/e}function round(t,e){return Math.round(toFixed(t,e))}function floor(t,e){return Math.floor(toFixed(t,e))}function ceil(t,e){return Math.ceil(toFixed(t,e))}export{clamp,squaredSegmentDistance,squaredDistance,solveLinearSystem,toDegrees,toRadians,modulo,lerp,toFixed,round,floor,ceil};