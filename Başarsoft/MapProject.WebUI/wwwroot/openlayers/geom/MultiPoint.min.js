import Point from"./Point.js";import SimpleGeometry from"./SimpleGeometry.js";import{closestSquaredDistanceXY,containsXY}from"../extent.js";import{deflateCoordinates}from"./flat/deflate.js";import{extend}from"../array.js";import{inflateCoordinates}from"./flat/inflate.js";import{squaredDistance as squaredDx}from"../math.js";class MultiPoint extends SimpleGeometry{constructor(t,e){super(),e&&!Array.isArray(t[0])?this.setFlatCoordinates(e,t):this.setCoordinates(t,e)}appendPoint(t){extend(this.flatCoordinates,t.getFlatCoordinates()),this.changed()}clone(){const t=new MultiPoint(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(i,s,o,r){if(r<closestSquaredDistanceXY(this.getExtent(),i,s))return r;var n=this.flatCoordinates,a=this.stride;for(let e=0,t=n.length;e<t;e+=a){var l=squaredDx(i,s,n[e],n[e+1]);if(l<r){r=l;for(let t=0;t<a;++t)o[t]=n[e+t];o.length=a}}return r}getCoordinates(){return inflateCoordinates(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getPoint(t){var e=this.flatCoordinates.length/this.stride;return t<0||e<=t?null:new Point(this.flatCoordinates.slice(t*this.stride,(t+1)*this.stride),this.layout)}getPoints(){const i=this.flatCoordinates;var s=this.layout,o=this.stride;const r=[];for(let t=0,e=i.length;t<e;t+=o){var n=new Point(i.slice(t,t+o),s);r.push(n)}return r}getType(){return"MultiPoint"}intersectsExtent(i){var s=this.flatCoordinates,o=this.stride;for(let t=0,e=s.length;t<e;t+=o){var r=s[t],n=s[t+1];if(containsXY(i,r,n))return!0}return!1}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=deflateCoordinates(this.flatCoordinates,0,t,this.stride),this.changed()}}export default MultiPoint;