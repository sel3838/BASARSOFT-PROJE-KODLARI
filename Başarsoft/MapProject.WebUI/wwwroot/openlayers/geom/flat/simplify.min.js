import{squaredDistance,squaredSegmentDistance}from"../../math.js";function simplifyLineString(r,e,n,t,a,u,i){return i=void 0!==i?i:[],u||(n=radialDistance(r,e,n,t,a,i,0),r=i,e=0,t=2),i.length=douglasPeucker(r,e,n,t,a,i,0),i}function douglasPeucker(n,t,r,a,u,e,i){var l=(r-t)/a;if(l<3){for(;t<r;t+=a)e[i++]=n[t],e[i++]=n[t+1];return i}const o=new Array(l),s=(o[0]=1,o[l-1]=1,[t,r-a]);let f=0;for(;0<s.length;){var c=s.pop(),p=s.pop();let e=0;var g=n[p],d=n[p+1],h=n[c],y=n[c+1];for(let r=p+a;r<c;r+=a){var q=n[r],A=n[r+1],q=squaredSegmentDistance(q,A,g,d,h,y);q>e&&(f=r,e=q)}e>u&&(o[(f-t)/a]=1,p+a<f&&s.push(p,f),f+a<c&&s.push(f,c))}for(let r=0;r<l;++r)o[r]&&(e[i++]=n[t+r*a],e[i++]=n[t+r*a+1]);return i}function douglasPeuckerArray(n,t,a,u,i,l,o,s){for(let r=0,e=a.length;r<e;++r){var f=a[r];o=douglasPeucker(n,t,f,u,i,l,o),s.push(o),t=f}return o}function douglasPeuckerMultiArray(n,t,a,u,i,l,o,s){for(let r=0,e=a.length;r<e;++r){var f=a[r],c=[];o=douglasPeuckerArray(n,t,f,u,i,l,o,c),s.push(c),t=f[f.length-1]}return o}function radialDistance(r,e,n,t,a,u,i){if(n<=e+t){for(;e<n;e+=t)u[i++]=r[e],u[i++]=r[e+1];return i}let l=r[e],o=r[e+1],s=(u[i++]=l,u[i++]=o,l),f=o;for(e+=t;e<n;e+=t)s=r[e],f=r[e+1],squaredDistance(l,o,s,f)>a&&(u[i++]=s,u[i++]=f,l=s,o=f);return s==l&&f==o||(u[i++]=s,u[i++]=f),i}function snap(r,e){return e*Math.round(r/e)}function quantize(r,e,n,t,a,u,i){if(e==n)return i;let l=snap(r[e],a),o=snap(r[e+1],a);e+=t,u[i++]=l,u[i++]=o;let s,f;do{if(s=snap(r[e],a),f=snap(r[e+1],a),(e+=t)==n)return u[i++]=s,u[i++]=f,i}while(s==l&&f==o);for(;e<n;){var c,p,g,d,h=snap(r[e],a),y=snap(r[e+1],a);e+=t,h==s&&y==f||(c=s-l,p=f-o,g=h-l,d=y-o,f=(s=(c*d==p*g&&(c<0&&g<c||c==g||0<c&&c<g)&&(p<0&&d<p||p==d||0<p&&p<d)||(u[i++]=s,u[i++]=f,l=s,o=f),h),y))}return u[i++]=s,u[i++]=f,i}function quantizeArray(n,t,a,u,i,l,o,s){for(let r=0,e=a.length;r<e;++r){var f=a[r];o=quantize(n,t,f,u,i,l,o),s.push(o),t=f}return o}function quantizeMultiArray(n,t,a,u,i,l,o,s){for(let r=0,e=a.length;r<e;++r){var f=a[r],c=[];o=quantizeArray(n,t,f,u,i,l,o,c),s.push(c),t=f[f.length-1]}return o}export{simplifyLineString,douglasPeucker,douglasPeuckerArray,douglasPeuckerMultiArray,radialDistance,snap,quantize,quantizeArray,quantizeMultiArray};