import CanvasBuilder from"./Builder.js";import CanvasInstruction from"./Instruction.js";import{asColorLike}from"../../colorlike.js";import{defaultFillStyle,defaultFont,defaultLineCap,defaultLineDash,defaultLineDashOffset,defaultLineJoin,defaultLineWidth,defaultMiterLimit,defaultPadding,defaultStrokeStyle,defaultTextAlign,defaultTextBaseline,registerFont}from"../canvas.js";import{getUid}from"../../util.js";import{intersects}from"../../extent.js";import{lineChunk}from"../../geom/flat/linechunk.js";import{matchingChunk}from"../../geom/flat/straightchunk.js";const TEXT_ALIGN={left:0,center:.5,right:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1};class CanvasTextBuilder extends CanvasBuilder{constructor(t,e,i,l){super(t,e,i,l),this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.fillStates[defaultFillStyle]={fillStyle:defaultFillStyle},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.declutterMode_=void 0,this.declutterImageWithText_=void 0}finish(){const t=super.finish();return t.textStates=this.textStates,t.fillStates=this.fillStates,t.strokeStates=this.strokeStates,t}drawText(t,e,i){var s=this.textFillState_,a=this.textStrokeState_,f=this.textState_;if(""!==this.text_&&f&&(s||a)){const _=this.coordinates;let o=_.length;s=t.getType();let r=null,h=t.getStride();if("line"!==f.placement||"LineString"!=s&&"MultiLineString"!=s&&"Polygon"!=s&&"MultiPolygon"!=s){let l=f.overflow?null:[];switch(s){case"Point":case"MultiPoint":r=t.getFlatCoordinates();break;case"LineString":r=t.getFlatMidpoint();break;case"Circle":r=t.getCenter();break;case"MultiLineString":r=t.getFlatMidpoints(),h=2;break;case"Polygon":r=t.getFlatInteriorPoint(),f.overflow||l.push(r[2]/this.resolution),h=3;break;case"MultiPolygon":var n=t.getFlatInteriorPoints();r=[];for(let t=0,e=n.length;t<e;t+=3)f.overflow||l.push(n[t+2]/this.resolution),r.push(n[t],n[t+1]);if(0===r.length)return;h=2}a=this.appendFlatPointCoordinates(r,h);if(a!==o){if(l&&(a-o)/2!=r.length/h){let i=o/2;l=l.filter((t,e)=>{e=_[2*(i+e)]===r[e*h]&&_[2*(i+e)+1]===r[e*h+1];return e||--i,e})}this.saveTextStates_(),(f.backgroundFill||f.backgroundStroke)&&(this.setFillStrokeStyle(f.backgroundFill,f.backgroundStroke),f.backgroundFill&&this.updateFillStyle(this.state,this.createFill),f.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e,i);let s=f.padding;if(s!=defaultPadding&&(f.scale[0]<0||f.scale[1]<0)){let t=f.padding[0],e=f.padding[1],i=f.padding[2],l=f.padding[3];f.scale[0]<0&&(e=-e,l=-l),f.scale[1]<0&&(t=-t,i=-i),s=[t,e,i,l]}const k=this.pixelRatio;this.instructions.push([CanvasInstruction.DRAW_IMAGE,o,a,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[1,1],NaN,this.declutterMode_,this.declutterImageWithText_,s==defaultPadding?defaultPadding:s.map(function(t){return t*k}),!!f.backgroundFill,!!f.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,l]);var d=1/k,u=this.state.fillStyle;f.backgroundFill&&(this.state.fillStyle=defaultFillStyle,this.hitDetectionInstructions.push(this.createFill(this.state))),this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE,o,a,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[d,d],NaN,this.declutterMode_,this.declutterImageWithText_,s,!!f.backgroundFill,!!f.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_&&defaultFillStyle,this.textOffsetX_,this.textOffsetY_,l]),f.backgroundFill&&(this.state.fillStyle=u,this.hitDetectionInstructions.push(this.createFill(this.state))),this.endGeometry(e)}}else if(intersects(this.maxExtent,t.getExtent())){let a;if(r=t.getFlatCoordinates(),"LineString"==s)a=[r.length];else if("MultiLineString"==s)a=t.getEnds();else if("Polygon"==s)a=t.getEnds().slice(0,1);else if("MultiPolygon"==s){var l=t.getEndss();a=[];for(let t=0,e=l.length;t<e;++t)a.push(l[t][0])}this.beginGeometry(t,e,i);var g=f.repeat,S=g?void 0:f.textAlign;let n=0;for(let s=0,t=a.length;s<t;++s){let l;for(let t=0,e=(l=g?lineChunk(g*this.resolution,r,n,a[s],h):[r.slice(n,a[s])]).length;t<e;++t){var c=l[t];let e=0,i=c.length;null==S&&(x=matchingChunk(f.maxAngle,c,0,c.length,2),e=x[0],i=x[1]);for(let t=e;t<i;t+=h)_.push(c[t],c[t+1]);var x=_.length;n=a[s],this.drawChars_(o,x),o=x}}this.endGeometry(e)}}}saveTextStates_(){var t=this.textStrokeState_,e=this.textState_,i=this.textFillState_,l=this.strokeKey_,l=(!t||l in this.strokeStates||(this.strokeStates[l]={strokeStyle:t.strokeStyle,lineCap:t.lineCap,lineDashOffset:t.lineDashOffset,lineWidth:t.lineWidth,lineJoin:t.lineJoin,miterLimit:t.miterLimit,lineDash:t.lineDash}),this.textKey_),t=(l in this.textStates||(this.textStates[l]={font:e.font,textAlign:e.textAlign||defaultTextAlign,justify:e.justify,textBaseline:e.textBaseline||defaultTextBaseline,scale:e.scale}),this.fillKey_);!i||t in this.fillStates||(this.fillStates[t]={fillStyle:i.fillStyle})}drawChars_(t,e){var i=this.textStrokeState_,l=this.textState_,s=this.strokeKey_,a=this.textKey_,n=this.fillKey_,o=(this.saveTextStates_(),this.pixelRatio),r=TEXT_ALIGN[l.textBaseline],h=this.textOffsetY_*o,f=this.text_,i=i?i.lineWidth*Math.abs(l.scale[0])/2:0;this.instructions.push([CanvasInstruction.DRAW_CHARS,t,e,r,l.overflow,n,l.maxAngle,o,h,s,i*o,f,a,1,this.declutterMode_]),this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS,t,e,r,l.overflow,n&&defaultFillStyle,l.maxAngle,o,h,s,i*o,f,a,1/o,this.declutterMode_])}setTextStyle(t,e){let i,l,s;if(t){const h=t.getFill(),f=(h?((l=this.textFillState_)||(l={},this.textFillState_=l),l.fillStyle=asColorLike(h.getColor()||defaultFillStyle)):(l=null,this.textFillState_=l),t.getStroke());if(f){(s=this.textStrokeState_)||(s={},this.textStrokeState_=s);const d=f.getLineDash();var a=f.getLineDashOffset(),n=f.getWidth(),o=f.getMiterLimit();s.lineCap=f.getLineCap()||defaultLineCap,s.lineDash=d?d.slice():defaultLineDash,s.lineDashOffset=void 0===a?defaultLineDashOffset:a,s.lineJoin=f.getLineJoin()||defaultLineJoin,s.lineWidth=void 0===n?defaultLineWidth:n,s.miterLimit=void 0===o?defaultMiterLimit:o,s.strokeStyle=asColorLike(f.getColor()||defaultStrokeStyle)}else s=null,this.textStrokeState_=s;i=this.textState_;var a=t.getFont()||defaultFont,n=(registerFont(a),t.getScaleArray()),o=(i.overflow=t.getOverflow(),i.font=a,i.maxAngle=t.getMaxAngle(),i.placement=t.getPlacement(),i.textAlign=t.getTextAlign(),i.repeat=t.getRepeat(),i.justify=t.getJustify(),i.textBaseline=t.getTextBaseline()||defaultTextBaseline,i.backgroundFill=t.getBackgroundFill(),i.backgroundStroke=t.getBackgroundStroke(),i.padding=t.getPadding()||defaultPadding,i.scale=void 0===n?[1,1]:n,t.getOffsetX()),a=t.getOffsetY(),n=t.getRotateWithView(),r=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===o?0:o,this.textOffsetY_=void 0===a?0:a,this.textRotateWithView_=void 0!==n&&n,this.textRotation_=void 0===r?0:r,this.strokeKey_=s?("string"==typeof s.strokeStyle?s.strokeStyle:getUid(s.strokeStyle))+s.lineCap+s.lineDashOffset+"|"+s.lineWidth+s.lineJoin+s.miterLimit+"["+s.lineDash.join()+"]":"",this.textKey_=i.font+i.scale+(i.textAlign||"?")+(i.repeat||"?")+(i.justify||"?")+(i.textBaseline||"?"),this.fillKey_=l&&l.fillStyle?"string"==typeof l.fillStyle?l.fillStyle:"|"+getUid(l.fillStyle):""}else this.text_="";this.declutterMode_=t.getDeclutterMode(),this.declutterImageWithText_=e}}export default CanvasTextBuilder;export{TEXT_ALIGN};