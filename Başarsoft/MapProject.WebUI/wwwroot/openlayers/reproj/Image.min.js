import{ERROR_THRESHOLD}from"./common.js";import EventType from"../events/EventType.js";import ImageState from"../ImageState.js";import ImageWrapper from"../Image.js";import Triangulation from"./Triangulation.js";import{calculateSourceResolution,render as renderReprojected}from"../reproj.js";import{fromResolutionLike}from"../resolution.js";import{getCenter,getHeight,getIntersection,getWidth,isEmpty}from"../extent.js";import{listen,unlistenByKey}from"../events.js";class ReprojImage extends ImageWrapper{constructor(t,e,s,i,r,a,o){let n=t.getExtent(),g=(n&&t.canWrapX()&&((n=n.slice())[0]=-1/0,n[2]=1/0),e.getExtent());g&&e.canWrapX()&&((g=g.slice())[0]=-1/0,g[2]=1/0);var u=g?getIntersection(s,g):s,m=getCenter(u),m=calculateSourceResolution(t,e,m,i);const c=new Triangulation(t,e,u,n,m*ERROR_THRESHOLD,i);t=c.calculateSourceExtent();const h=isEmpty(t)?null:a(t,m,r);u=h?ImageState.IDLE:ImageState.EMPTY,a=h?h.getPixelRatio():1;super(s,i,a,u),this.targetProj_=e,this.maxSourceExtent_=n,this.triangulation_=c,this.targetResolution_=i,this.targetExtent_=s,this.sourceImage_=h,this.sourcePixelRatio_=a,this.interpolate_=o,this.canvas_=null,this.sourceListenerKey_=null}disposeInternal(){this.state==ImageState.LOADING&&this.unlistenSource_(),super.disposeInternal()}getImage(){return this.canvas_}getProjection(){return this.targetProj_}reproject_(){var t,e,s=this.sourceImage_.getState();s==ImageState.LOADED&&(t=getWidth(this.targetExtent_)/this.targetResolution_,e=getHeight(this.targetExtent_)/this.targetResolution_,this.canvas_=renderReprojected(t,e,this.sourcePixelRatio_,fromResolutionLike(this.sourceImage_.getResolution()),this.maxSourceExtent_,this.targetResolution_,this.targetExtent_,this.triangulation_,[{extent:this.sourceImage_.getExtent(),image:this.sourceImage_.getImage()}],0,void 0,this.interpolate_,!0)),this.state=s,this.changed()}load(){var t;this.state==ImageState.IDLE&&(this.state=ImageState.LOADING,this.changed(),(t=this.sourceImage_.getState())==ImageState.LOADED||t==ImageState.ERROR?this.reproject_():(this.sourceListenerKey_=listen(this.sourceImage_,EventType.CHANGE,function(t){var e=this.sourceImage_.getState();e!=ImageState.LOADED&&e!=ImageState.ERROR||(this.unlistenSource_(),this.reproject_())},this),this.sourceImage_.load()))}unlistenSource_(){unlistenByKey(this.sourceListenerKey_),this.sourceListenerKey_=null}}export default ReprojImage;