import Event from"../events/Event.js";import EventType from"../events/EventType.js";import Interaction from"./Interaction.js";import{TRUE}from"../functions.js";import{get as getProjection,getUserProjection}from"../proj.js";import{listen,unlistenByKey}from"../events.js";const DragAndDropEventType={ADD_FEATURES:"addfeatures"};class DragAndDropEvent extends Event{constructor(e,t,r,s){super(e),this.features=r,this.file=t,this.projection=s}}class DragAndDrop extends Interaction{constructor(e){e=e||{},super({handleEvent:TRUE}),this.on,this.once,this.un,this.readAsBuffer_=!1,this.formats_=[];var r=e.formatConstructors||[];for(let t=0,e=r.length;t<e;++t){let e=r[t];"function"==typeof e&&(e=new e),this.formats_.push(e),this.readAsBuffer_=this.readAsBuffer_||"arraybuffer"===e.getType()}this.projection_=e.projection?getProjection(e.projection):null,this.dropListenKeys_=null,this.source_=e.source||null,this.target=e.target||null}handleResult_(r,e){var s=e.target.result;const t=this.getMap();let n=this.projection_;if(!n&&!(n=getUserProjection())){const h=t.getView();n=h.getProjection()}let i;var o=this.formats_;for(let t=0,e=o.length;t<e;++t){const p=o[t];let e=s;this.readAsBuffer_&&"arraybuffer"!==p.getType()&&(void 0===i&&(i=(new TextDecoder).decode(s)),e=i);var a=this.tryReadFeatures_(p,e,{featureProjection:n});if(a&&0<a.length){this.source_&&(this.source_.clear(),this.source_.addFeatures(a)),this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES,r,a,n));break}}}registerListeners_(){const e=this.getMap();var t;e&&(t=this.target||e.getViewport(),this.dropListenKeys_=[listen(t,EventType.DROP,this.handleDrop,this),listen(t,EventType.DRAGENTER,this.handleStop,this),listen(t,EventType.DRAGOVER,this.handleStop,this),listen(t,EventType.DROP,this.handleStop,this)])}setActive(e){!this.getActive()&&e&&this.registerListeners_(),this.getActive()&&!e&&this.unregisterListeners_(),super.setActive(e)}setMap(e){this.unregisterListeners_(),super.setMap(e),this.getActive()&&this.registerListeners_()}tryReadFeatures_(e,t,r){try{return e.readFeatures(t,r)}catch(e){return null}}unregisterListeners_(){this.dropListenKeys_&&(this.dropListenKeys_.forEach(unlistenByKey),this.dropListenKeys_=null)}handleDrop(e){const r=e.dataTransfer.files;for(let e=0,t=r.length;e<t;++e){var s=r.item(e);const n=new FileReader;n.addEventListener(EventType.LOAD,this.handleResult_.bind(this,s)),this.readAsBuffer_?n.readAsArrayBuffer(s):n.readAsText(s)}}handleStop(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}}export default DragAndDrop;export{DragAndDropEvent};