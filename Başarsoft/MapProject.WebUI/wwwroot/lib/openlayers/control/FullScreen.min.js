import Control from"./Control.js";import EventType from"../events/EventType.js";import MapProperty from"../MapProperty.js";import{CLASS_CONTROL,CLASS_UNSELECTABLE,CLASS_UNSUPPORTED}from"../css.js";import{listen,unlistenByKey}from"../events.js";import{replaceNode}from"../dom.js";const events=["fullscreenchange","webkitfullscreenchange","MSFullscreenChange"],FullScreenEventType={ENTERFULLSCREEN:"enterfullscreen",LEAVEFULLSCREEN:"leavefullscreen"};class FullScreen extends Control{constructor(e){e=e||{},super({element:document.createElement("div"),target:e.target}),this.on,this.once,this.un,this.keys_=void 0!==e.keys&&e.keys,this.source_=e.source,this.isInFullscreen_=!1,this.boundHandleMapTargetChange_=this.handleMapTargetChange_.bind(this),this.cssClassName_=void 0!==e.className?e.className:"ol-full-screen",this.documentListeners_=[],this.activeClassName_=void 0!==e.activeClassName?e.activeClassName.split(" "):[this.cssClassName_+"-true"],this.inactiveClassName_=void 0!==e.inactiveClassName?e.inactiveClassName.split(" "):[this.cssClassName_+"-false"];var t=void 0!==e.label?e.label:"⤢",t=(this.labelNode_="string"==typeof t?document.createTextNode(t):t,void 0!==e.labelActive?e.labelActive:"×"),t=(this.labelActiveNode_="string"==typeof t?document.createTextNode(t):t,e.tipLabel||"Toggle full-screen");this.button_=document.createElement("button"),this.button_.title=t,this.button_.setAttribute("type","button"),this.button_.appendChild(this.labelNode_),this.button_.addEventListener(EventType.CLICK,this.handleClick_.bind(this),!1),this.setClassName_(this.button_,this.isInFullscreen_),this.element.className=this.cssClassName_+` ${CLASS_UNSELECTABLE} `+CLASS_CONTROL,this.element.appendChild(this.button_)}handleClick_(e){e.preventDefault(),this.handleFullScreen_()}handleFullScreen_(){const t=this.getMap();if(t){const s=t.getOwnerDocument();if(isFullScreenSupported(s))if(isFullScreen(s))exitFullScreen(s);else{let e;e=this.source_?"string"==typeof this.source_?s.getElementById(this.source_):this.source_:t.getTargetElement(),(this.keys_?requestFullScreenWithKeys:requestFullScreen)(e)}}}handleFullScreenChange_(){const e=this.getMap();var t;e&&(t=this.isInFullscreen_,this.isInFullscreen_=isFullScreen(e.getOwnerDocument()),t!==this.isInFullscreen_&&(this.setClassName_(this.button_,this.isInFullscreen_),this.isInFullscreen_?(replaceNode(this.labelActiveNode_,this.labelNode_),this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN)):(replaceNode(this.labelNode_,this.labelActiveNode_),this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN)),e.updateSize()))}setClassName_(e,t){t?(e.classList.remove(...this.inactiveClassName_),e.classList.add(...this.activeClassName_)):(e.classList.remove(...this.activeClassName_),e.classList.add(...this.inactiveClassName_))}setMap(e){const t=this.getMap();t&&t.removeChangeListener(MapProperty.TARGET,this.boundHandleMapTargetChange_),super.setMap(e),this.handleMapTargetChange_(),e&&e.addChangeListener(MapProperty.TARGET,this.boundHandleMapTargetChange_)}handleMapTargetChange_(){const s=this.documentListeners_;for(let e=0,t=s.length;e<t;++e)unlistenByKey(s[e]);s.length=0;const e=this.getMap();if(e){var l=e.getOwnerDocument();isFullScreenSupported(l)?this.element.classList.remove(CLASS_UNSUPPORTED):this.element.classList.add(CLASS_UNSUPPORTED);for(let e=0,t=events.length;e<t;++e)s.push(listen(l,events[e],this.handleFullScreenChange_,this));this.handleFullScreenChange_()}}}function isFullScreenSupported(e){var t=e.body;return!!(t.webkitRequestFullscreen||t.requestFullscreen&&e.fullscreenEnabled)}function isFullScreen(e){return!(!e.webkitIsFullScreen&&!e.fullscreenElement)}function requestFullScreen(e){e.requestFullscreen?e.requestFullscreen():e.webkitRequestFullscreen&&e.webkitRequestFullscreen()}function requestFullScreenWithKeys(e){e.webkitRequestFullscreen?e.webkitRequestFullscreen():requestFullScreen(e)}function exitFullScreen(e){e.exitFullscreen?e.exitFullscreen():e.webkitExitFullscreen&&e.webkitExitFullscreen()}export default FullScreen;