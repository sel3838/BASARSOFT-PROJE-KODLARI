import Feature from"../Feature.js";import RenderFeature from"../render/Feature.js";import{GeometryCollection,LineString,MultiLineString,MultiPoint,MultiPolygon,Point,Polygon}from"../geom.js";import{abstract}from"../util.js";import{equivalent as equivalentProjection,get as getProjection,getTransform,transformExtent}from"../proj.js";import{linearRingsAreOriented,linearRingssAreOriented,orientLinearRings,orientLinearRingsArray}from"../geom/flat/orient.js";class FeatureFormat{constructor(){this.dataProjection=void 0,this.defaultFeatureProjection=void 0,this.featureClass=Feature,this.supportedMediaTypes=null}getReadOptions(e,r){if(r){let t=r.dataProjection?getProjection(r.dataProjection):this.readProjection(e);r.extent&&t&&"tile-pixels"===t.getUnits()&&(t=getProjection(t)).setWorldExtent(r.extent),r={dataProjection:t,featureProjection:r.featureProjection}}return this.adaptOptions(r)}adaptOptions(t){return Object.assign({dataProjection:this.dataProjection,featureProjection:this.defaultFeatureProjection,featureClass:this.featureClass},t)}getType(){return abstract()}readFeature(t,e){return abstract()}readFeatures(t,e){return abstract()}readGeometry(t,e){return abstract()}readProjection(t){return abstract()}writeFeature(t,e){return abstract()}writeFeatures(t,e){return abstract()}writeGeometry(t,e){return abstract()}}export default FeatureFormat;function transformGeometryWithOptions(t,e,r){var o=r?getProjection(r.featureProjection):null,n=r?getProjection(r.dataProjection):null;let i=t;if(o&&n&&!equivalentProjection(o,n)){e&&(i=t.clone());const a=e?o:n;n=e?n:o;"tile-pixels"===a.getUnits()?i.transform(a,n):i.applyTransform(getTransform(a,n))}if(e&&r&&void 0!==r.decimals){const s=Math.pow(10,r.decimals);(i=i===t?t.clone():i).applyTransform(function(r){for(let t=0,e=r.length;t<e;++t)r[t]=Math.round(r[t]*s)/s;return r})}return i}function transformExtentWithOptions(t,e){var r=e?getProjection(e.featureProjection):null,e=e?getProjection(e.dataProjection):null;return r&&e&&!equivalentProjection(r,e)?transformExtent(t,e,r):t}const GeometryConstructor={Point:Point,LineString:LineString,Polygon:Polygon,MultiPoint:MultiPoint,MultiLineString:MultiLineString,MultiPolygon:MultiPolygon};function orientFlatCoordinates(t,e,r){return Array.isArray(e[0])?linearRingssAreOriented(t,0,e,r)||(t=t.slice(),orientLinearRingsArray(t,0,e,r)):linearRingsAreOriented(t,0,e,r)||(t=t.slice(),orientLinearRings(t,0,e,r)),t}function createRenderFeature(e,t){const r=e.geometry;if(!r)return[];if(Array.isArray(r))return r.map(t=>createRenderFeature({...e,geometry:t})).flat();var o="MultiPolygon"===r.type?"Polygon":r.type;if("GeometryCollection"===o||"Circle"===o)throw new Error("Unsupported geometry type: "+o);var n=r.layout.length;return transformGeometryWithOptions(new RenderFeature(o,"Polygon"===o?orientFlatCoordinates(r.flatCoordinates,r.ends,n):r.flatCoordinates,r.ends?.flat(),n,e.properties||{},e.id).enableSimplifyTransformed(),!1,t)}function createGeometry(t,e){if(!t)return null;var r;if(Array.isArray(t))return r=t.map(t=>createGeometry(t,e)),new GeometryCollection(r);const o=GeometryConstructor[t.type];return transformGeometryWithOptions(new o(t.flatCoordinates,t.layout,t.ends),!1,e)}export{transformGeometryWithOptions,transformExtentWithOptions,createRenderFeature,createGeometry};