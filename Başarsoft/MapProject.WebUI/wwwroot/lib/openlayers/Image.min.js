import EventTarget from"./events/Target.js";import EventType from"./events/EventType.js";import ImageState from"./ImageState.js";import{CREATE_IMAGE_BITMAP,IMAGE_DECODE}from"./has.js";import{listenOnce,unlistenByKey}from"./events.js";import{toPromise}from"./functions.js";class ImageWrapper extends EventTarget{constructor(e,t,n,i){super(),this.extent=e,this.pixelRatio_=n,this.resolution=t,this.state="function"==typeof i?ImageState.IDLE:i,this.image_=null,this.loader="function"==typeof i?i:null}changed(){this.dispatchEvent(EventType.CHANGE)}getExtent(){return this.extent}getImage(){return this.image_}getPixelRatio(){return this.pixelRatio_}getResolution(){return this.resolution}getState(){return this.state}load(){if(this.state==ImageState.IDLE&&this.loader){this.state=ImageState.LOADING,this.changed();var e=this.getResolution();const t=Array.isArray(e)?e[0]:e;toPromise(()=>this.loader(this.getExtent(),t,this.getPixelRatio())).then(e=>{"image"in e&&(this.image_=e.image),"extent"in e&&(this.extent=e.extent),"resolution"in e&&(this.resolution=e.resolution),"pixelRatio"in e&&(this.pixelRatio_=e.pixelRatio),(e instanceof HTMLImageElement||e instanceof ImageBitmap||e instanceof HTMLCanvasElement||e instanceof HTMLVideoElement)&&(this.image_=e),this.state=ImageState.LOADED}).catch(e=>{this.state=ImageState.ERROR,console.error(e)}).finally(()=>this.changed())}}setImage(e){this.image_=e}setResolution(e){this.resolution=e}}function listenImage(e,t,n){const i=e;let o=!0,s=!1,a=!1;const r=[listenOnce(i,EventType.LOAD,function(){a=!0,s||t()})];return i.src&&IMAGE_DECODE?(s=!0,i.decode().then(function(){o&&t()}).catch(function(e){o&&(a?t:n)()})):r.push(listenOnce(i,EventType.ERROR,n)),function(){o=!1,r.forEach(unlistenByKey)}}function load(s,a){return new Promise((e,t)=>{function n(){o(),e(s)}function i(){o(),t(new Error("Image load error"))}function o(){s.removeEventListener("load",n),s.removeEventListener("error",i)}s.addEventListener("load",n),s.addEventListener("error",i),a&&(s.src=a)})}function decodeFallback(i,e){return e&&(i.src=e),i.src&&IMAGE_DECODE?new Promise((t,n)=>i.decode().then(()=>t(i)).catch(e=>i.complete&&i.width?t(i):n(e))):load(i)}function decode(t,e){return e&&(t.src=e),t.src&&IMAGE_DECODE&&CREATE_IMAGE_BITMAP?t.decode().then(()=>createImageBitmap(t)).catch(e=>{if(t.complete&&t.width)return t;throw e}):decodeFallback(t)}export default ImageWrapper;export{listenImage,load,decodeFallback,decode};