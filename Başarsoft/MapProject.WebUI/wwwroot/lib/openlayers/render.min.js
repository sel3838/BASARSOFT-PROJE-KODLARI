import CanvasImmediateRenderer from"./render/canvas/Immediate.js";import{DEVICE_PIXEL_RATIO}from"./has.js";import{apply as applyTransform,create as createTransform,multiply as multiplyTransform,scale as scaleTransform}from"./transform.js";import{getSquaredTolerance}from"./renderer/vector.js";import{getTransformFromProjections,getUserProjection}from"./proj.js";function toContext(e,r){const t=e.canvas;var n=(r=r||{}).pixelRatio||DEVICE_PIXEL_RATIO,r=r.size,r=(r&&(t.width=r[0]*n,t.height=r[1]*n,t.style.width=r[0]+"px",t.style.height=r[1]+"px"),[0,0,t.width,t.height]),o=scaleTransform(createTransform(),n,n);return new CanvasImmediateRenderer(e,n,r,o,0)}function getVectorContext(e){if(!(e.context instanceof CanvasRenderingContext2D))throw new Error("Only works for render events from Canvas 2D layers");var r=e.inversePixelTransform[0],t=e.inversePixelTransform[1],r=Math.sqrt(r*r+t*t),t=e.frameState,n=multiplyTransform(e.inversePixelTransform.slice(),t.coordinateToPixelTransform),o=getSquaredTolerance(t.viewState.resolution,r);let a;var s=getUserProjection();return s&&(a=getTransformFromProjections(s,t.viewState.projection)),new CanvasImmediateRenderer(e.context,r,t.extent,n,t.viewState.rotation,o,a)}function getRenderPixel(e,r){return applyTransform(e.inversePixelTransform,r.slice(0))}export{toContext,getVectorContext,getRenderPixel};