import Tile from"./Tile.js";import{createCanvasContext2D,releaseCanvas}from"./dom.js";import{getUid}from"./util.js";const canvasPool=[];class VectorRenderTile extends Tile{constructor(e,t,i,s){super(e,t,{transition:0}),this.context_={},this.executorGroups={},this.loadingSourceTiles=0,this.hitDetectionImageData={},this.replayState_={},this.sourceTiles=[],this.errorTileKeys={},this.wantedResolution,this.getSourceTiles=s.bind(void 0,this),this.wrappedTileCoord=i}getContext(e){e=getUid(e);return e in this.context_||(this.context_[e]=createCanvasContext2D(1,1,canvasPool)),this.context_[e]}hasContext(e){return getUid(e)in this.context_}getImage(e){return this.hasContext(e)?this.getContext(e).canvas:null}getReplayState(e){e=getUid(e);return e in this.replayState_||(this.replayState_[e]={dirty:!1,renderedRenderOrder:null,renderedResolution:NaN,renderedRevision:-1,renderedTileResolution:NaN,renderedTileRevision:-1,renderedTileZ:-1}),this.replayState_[e]}load(){this.getSourceTiles()}release(){for(const t in this.context_){var e=this.context_[t];releaseCanvas(e),canvasPool.push(e.canvas),delete this.context_[t]}super.release()}}export default VectorRenderTile;