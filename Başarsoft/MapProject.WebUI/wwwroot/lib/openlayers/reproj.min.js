import{containsCoordinate,createEmpty,extend,forEachCorner,getCenter,getHeight,getTopLeft,getWidth}from"./extent.js";import{createCanvasContext2D,releaseCanvas}from"./dom.js";import{getPointResolution,transform}from"./proj.js";import{solveLinearSystem}from"./math.js";let brokenDiagonalRendering_;const canvasPool=[];function drawTestTriangle(e,t,n,o,a){e.beginPath(),e.moveTo(0,0),e.lineTo(t,n),e.lineTo(o,a),e.closePath(),e.save(),e.clip(),e.fillRect(0,0,Math.max(t,o)+1,Math.max(n,a)),e.restore()}function verifyBrokenDiagonalRendering(e,t){return 2<Math.abs(e[4*t]-210)||2<Math.abs(e[4*t+3]-191.25)}function isBrokenDiagonalRendering(){if(void 0===brokenDiagonalRendering_){const t=createCanvasContext2D(6,6,canvasPool);t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",drawTestTriangle(t,4,5,4,0),drawTestTriangle(t,4,5,0,5);var e=t.getImageData(0,0,3,3).data;brokenDiagonalRendering_=verifyBrokenDiagonalRendering(e,0)||verifyBrokenDiagonalRendering(e,4)||verifyBrokenDiagonalRendering(e,8),releaseCanvas(t),canvasPool.push(t.canvas)}return brokenDiagonalRendering_}function calculateSourceResolution(e,t,n,o){var a=transform(n,t,e);let r=getPointResolution(t,o,n);var o=t.getMetersPerUnit(),n=(void 0!==o&&(r*=o),e.getMetersPerUnit()),t=(void 0!==n&&(r/=n),e.getExtent());return t&&!containsCoordinate(t,a)||(o=getPointResolution(e,r,a)/r,isFinite(o)&&0<o&&(r/=o)),r}function calculateSourceExtentResolution(t,n,e,o){var a=getCenter(e);let r=calculateSourceResolution(t,n,a,o);return(!isFinite(r)||r<=0)&&forEachCorner(e,function(e){return r=calculateSourceResolution(t,n,e,o),isFinite(r)&&0<r}),r}function render(e,t,n,o,a,p,r,i,x,l,s,M,c,g){const T=createCanvasContext2D(Math.round(n*e),Math.round(n*t),canvasPool);if(M||(T.imageSmoothingEnabled=!1),0===x.length)return T.canvas;function C(e){return Math.round(e*n)/n}T.scale(n,n),T.globalCompositeOperation="lighter";const R=createEmpty();x.forEach(function(e,t,n){extend(R,e.extent)});let E;const h=n/o,P=(M?1:1+Math.pow(2,-24))/h;if(!c||1!==x.length||0!==l){if(E=createCanvasContext2D(Math.round(getWidth(R)*h),Math.round(getHeight(R)*h),canvasPool),M||(E.imageSmoothingEnabled=!1),a&&g){o=(a[0]-R[0])*h,c=-(a[3]-R[3])*h;const e=getWidth(a)*h,t=getHeight(a)*h;E.rect(o,c,e,t),E.clip()}x.forEach(function(e,t,n){var o,a,r,i;0<e.image.width&&0<e.image.height&&(e.clipExtent&&(E.save(),a=(e.clipExtent[0]-R[0])*h,i=-(e.clipExtent[3]-R[3])*h,o=getWidth(e.clipExtent)*h,r=getHeight(e.clipExtent)*h,E.rect(M?a:Math.round(a),M?i:Math.round(i),M?o:Math.round(a+o)-Math.round(a),M?r:Math.round(i+r)-Math.round(i)),E.clip()),o=(e.extent[0]-R[0])*h,a=-(e.extent[3]-R[3])*h,r=getWidth(e.extent)*h,i=getHeight(e.extent)*h,E.drawImage(e.image,l,l,e.image.width-2*l,e.image.height-2*l,M?o:Math.round(o),M?a:Math.round(a),M?r:Math.round(o+r)-Math.round(o),M?i:Math.round(a+i)-Math.round(a)),e.clipExtent&&E.restore())})}const b=getTopLeft(r);return i.getTriangles().forEach(function(t,e,n){const o=t.source;var t=t.target,a=o[0][0],r=o[0][1],i=o[1][0],l=o[1][1],s=o[2][0],c=o[2][1],g=C((t[0][0]-b[0])/p),h=C(-(t[0][1]-b[1])/p),u=C((t[1][0]-b[0])/p),d=C(-(t[1][1]-b[1])/p),v=C((t[2][0]-b[0])/p),t=C(-(t[2][1]-b[1])/p),i=[[i-=a,l-=r,0,0,u-g],[s-=a,c-=r,0,0,v-g],[0,0,i,l,d-h],[0,0,s,c,t-h]],l=solveLinearSystem(i);if(l){if(T.save(),T.beginPath(),isBrokenDiagonalRendering()||!M){T.moveTo(u,d);var f=g-u,m=h-d;for(let e=0;e<4;e++)T.lineTo(u+C((e+1)*f/4),d+C(e*m/3)),3!=e&&T.lineTo(u+C((e+1)*f/4),d+C((e+1)*m/3));T.lineTo(v,t)}else T.moveTo(u,d),T.lineTo(g,h),T.lineTo(v,t);T.clip(),T.transform(l[0],l[2],l[1],l[3],g,h),T.translate(R[0]-a,R[3]-r);let e;if(E)e=E.canvas,T.scale(P,-P);else{const o=x[0];s=o.extent;e=o.image,T.scale(getWidth(s)/e.width,-getHeight(s)/e.height)}T.drawImage(e,0,0),T.restore()}}),E&&(releaseCanvas(E),canvasPool.push(E.canvas)),s&&(T.save(),T.globalCompositeOperation="source-over",T.strokeStyle="black",T.lineWidth=1,i.getTriangles().forEach(function(e,t,n){var e=e.target,o=(e[0][0]-b[0])/p,a=-(e[0][1]-b[1])/p,r=(e[1][0]-b[0])/p,i=-(e[1][1]-b[1])/p,l=(e[2][0]-b[0])/p,e=-(e[2][1]-b[1])/p;T.beginPath(),T.moveTo(r,i),T.lineTo(o,a),T.lineTo(l,e),T.closePath(),T.stroke()}),T.restore()),T.canvas}export{canvasPool,calculateSourceResolution,calculateSourceExtentResolution,render};