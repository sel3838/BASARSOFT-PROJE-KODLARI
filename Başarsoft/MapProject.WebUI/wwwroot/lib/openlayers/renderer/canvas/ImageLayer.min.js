import CanvasLayerRenderer from"./Layer.js";import ImageState from"../../ImageState.js";import ViewHint from"../../ViewHint.js";import{apply as applyTransform,compose as composeTransform}from"../../transform.js";import{containsCoordinate,containsExtent,getHeight,getIntersection,getWidth,intersects as intersectsExtent,isEmpty}from"../../extent.js";import{fromUserExtent}from"../../proj.js";class CanvasImageLayerRenderer extends CanvasLayerRenderer{constructor(e){super(e),this.image_=null}getImage(){return this.image_?this.image_.getImage():null}prepareFrame(e){var t=e.layerStatesArray[e.layerIndex],r=e.pixelRatio,a=e.viewState,i=a.resolution;const n=this.getLayer().getSource();var s=e.viewHints;let o=e.extent;if(void 0!==t.extent&&(o=getIntersection(o,fromUserExtent(t.extent,a.projection))),!s[ViewHint.ANIMATING]&&!s[ViewHint.INTERACTING]&&!isEmpty(o))if(n){e=a.projection;const g=n.getImage(o,i,r,e);g&&(this.loadImage(g)?this.image_=g:g.getState()===ImageState.EMPTY&&(this.image_=null))}else this.image_=null;return!!this.image_}getData(e){var t=this.frameState;if(!t)return null;const r=this.getLayer();t=applyTransform(t.pixelToCoordinateTransform,e.slice()),e=r.getExtent();if(e&&!containsCoordinate(e,t))return null;var e=this.image_.getExtent(),a=this.image_.getImage(),i=getWidth(e),i=Math.floor(a.width*((t[0]-e[0])/i));if(i<0||i>=a.width)return null;var n=getHeight(e),e=Math.floor(a.height*((e[3]-t[1])/n));return e<0||e>=a.height?null:this.getImageData(a,i,e)}renderFrame(e,t){const r=this.image_;var a=r.getExtent(),i=r.getResolution(),[i,n]=Array.isArray(i)?i:[i,i],s=r.getPixelRatio(),o=e.layerStatesArray[e.layerIndex],g=e.pixelRatio,m=e.viewState,h=m.center,l=m.resolution,p=g*i/(l*s),l=g*n/(l*s),t=(this.prepareContainer(e,t),this.context.canvas.width),c=this.context.canvas.height;const d=this.getRenderContext(e);let x=!1,f=!0;o.extent&&(m=fromUserExtent(o.extent,m.projection),f=intersectsExtent(m,e.extent),(x=f&&!containsExtent(m,e.extent))&&this.clipUnrotated(d,e,m));m=r.getImage(),t=composeTransform(this.tempTransform,t/2,c/2,p,l,0,s*(a[0]-h[0])/i,s*(h[1]-a[3])/n),this.renderedResolution=n*g/s,c=m.width*t[0],p=m.height*t[3];return this.getLayer().getSource().getInterpolate()||(d.imageSmoothingEnabled=!1),this.preRender(d,e),f&&.5<=c&&.5<=p&&(l=t[4],i=t[5],1!==(h=o.opacity)&&(d.save(),d.globalAlpha=h),d.drawImage(m,0,0,+m.width,+m.height,l,i,c,p),1!==h&&d.restore()),this.postRender(this.context,e),x&&d.restore(),d.imageSmoothingEnabled=!0,this.container}}export default CanvasImageLayerRenderer;