import lchuv from"color-space/lchuv.js";import parseRgba from"color-rgba";import rgb from"color-space/rgb.js";import xyz from"color-space/xyz.js";import{clamp}from"./math.js";function asString(r){return"string"==typeof r?r:toString(r)}const MAX_CACHE_SIZE=1024,cache={};let cacheSize=0;function withAlpha(r){if(4===r.length)return r;const o=r.slice();return o[3]=1,o}function rgbaToLcha(r){const o=xyz.lchuv(rgb.xyz(r));return o[3]=r[3],o}function lchaToRgba(r){const o=xyz.rgb(lchuv.xyz(r));return o[3]=r[3],o}function fromString(r){if(cache.hasOwnProperty(r))return cache[r];if(cacheSize>=MAX_CACHE_SIZE){let r=0;for(const t in cache)0==(3&r++)&&(delete cache[t],--cacheSize)}var o=parseRgba(r);if(4!==o.length)throw new Error('Failed to parse "'+r+'" as color');for(const c of o)if(isNaN(c))throw new Error('Failed to parse "'+r+'" as color');return normalize(o),cache[r]=o,++cacheSize,o}function asArray(r){return Array.isArray(r)?r:fromString(r)}function normalize(r){return r[0]=clamp(r[0]+.5|0,0,255),r[1]=clamp(r[1]+.5|0,0,255),r[2]=clamp(r[2]+.5|0,0,255),r[3]=clamp(r[3],0,1),r}function toString(r){let o=r[0],t=(o!=(0|o)&&(o=o+.5|0),r[1]),c=(t!=(0|t)&&(t=t+.5|0),r[2]);c!=(0|c)&&(c=c+.5|0);r=void 0===r[3]?1:Math.round(1e3*r[3])/1e3;return"rgba("+o+","+t+","+c+","+r+")"}function isStringColor(r){try{return fromString(r),!0}catch(r){return!1}}export{asString,withAlpha,rgbaToLcha,lchaToRgba,fromString,asArray,normalize,toString,isStringColor};