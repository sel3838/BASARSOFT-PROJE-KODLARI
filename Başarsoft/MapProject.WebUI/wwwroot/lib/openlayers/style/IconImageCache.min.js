import ImageState from"../ImageState.js";import{asArray}from"../color.js";import{getSharedCanvasContext2D}from"../dom.js";class IconImageCache{constructor(){this.cache_={},this.patternCache_={},this.cacheSize_=0,this.maxCacheSize_=32}clear(){this.cache_={},this.patternCache_={},this.cacheSize_=0}canExpireCache(){return this.cacheSize_>this.maxCacheSize_}expire(){if(this.canExpireCache()){let e=0;for(const t in this.cache_){const a=this.cache_[t];0!=(3&e++)||a.hasListener()||(delete this.cache_[t],delete this.patternCache_[t],--this.cacheSize_)}}}get(e,t,a){e=getCacheKey(e,t,a);return e in this.cache_?this.cache_[e]:null}getPattern(e,t,a){e=getCacheKey(e,t,a);return e in this.patternCache_?this.patternCache_[e]:null}set(e,t,a,h,c){const r=getCacheKey(e,t,a);e=r in this.cache_;this.cache_[r]=h,c&&(h.getImageState()===ImageState.IDLE&&h.load(),h.getImageState()===ImageState.LOADING?h.ready().then(()=>{this.patternCache_[r]=getSharedCanvasContext2D().createPattern(h.getImage(1),"repeat")}):this.patternCache_[r]=getSharedCanvasContext2D().createPattern(h.getImage(1),"repeat")),e||++this.cacheSize_}setSize(e){this.maxCacheSize_=e,this.expire()}}function getCacheKey(e,t,a){return t+":"+e+":"+(a?asArray(a):"null")}export default IconImageCache;const shared=new IconImageCache;export{getCacheKey,shared};