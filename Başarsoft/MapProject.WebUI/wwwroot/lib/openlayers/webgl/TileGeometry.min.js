import BaseTileRepresentation from"./BaseTileRepresentation.js";import MixedGeometryBatch from"../render/webgl/MixedGeometryBatch.js";import WebGLArrayBuffer from"./Buffer.js";import{ARRAY_BUFFER,STATIC_DRAW}from"../webgl.js";import{create as createTransform,translate as translateTransform}from"../transform.js";class TileGeometry extends BaseTileRepresentation{constructor(e,t){super(e),this.batch_=new MixedGeometryBatch,this.styleRenderers_=t,this.buffers=[],this.maskVertices=new WebGLArrayBuffer(ARRAY_BUFFER,STATIC_DRAW),this.setTile(e.tile)}generateMaskBuffer_(){var e=this.tile.getSourceTiles()[0].extent;this.maskVertices.fromArray([e[0],e[1],e[2],e[1],e[2],e[3],e[0],e[3]]),this.helper_.flushBufferData(this.maskVertices)}uploadTile(){this.generateMaskBuffer_(),this.batch_.clear();const e=this.tile.getSourceTiles();var t=e.reduce((e,t)=>e.concat(t.getFeatures()),[]),t=(this.batch_.addFeatures(t),e[0].extent[0]),r=e[0].extent[1];const s=translateTransform(createTransform(),-t,-r);t=this.styleRenderers_.map((e,t)=>e.generateBuffers(this.batch_,s).then(e=>{this.buffers[t]=e}));Promise.all(t).then(()=>{this.setReady()})}}export default TileGeometry;