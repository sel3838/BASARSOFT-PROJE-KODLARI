import EventType from"../events/EventType.js";import Geometry from"./Geometry.js";import{closestSquaredDistanceXY,createOrUpdateEmpty,extend,getCenter}from"../extent.js";import{listen,unlistenByKey}from"../events.js";class GeometryCollection extends Geometry{constructor(e){super(),this.geometries_=e,this.changeEventsKeys_=[],this.listenGeometriesChange_()}unlistenGeometriesChange_(){this.changeEventsKeys_.forEach(unlistenByKey),this.changeEventsKeys_.length=0}listenGeometriesChange_(){var s=this.geometries_;for(let e=0,t=s.length;e<t;++e)this.changeEventsKeys_.push(listen(s[e],EventType.CHANGE,this.changed,this))}clone(){const e=new GeometryCollection(cloneGeometries(this.geometries_));return e.applyProperties(this),e}closestPointXY(s,i,r,n){if(n<closestSquaredDistanceXY(this.getExtent(),s,i))return n;const o=this.geometries_;for(let e=0,t=o.length;e<t;++e)n=o[e].closestPointXY(s,i,r,n);return n}containsXY(s,i){const r=this.geometries_;for(let e=0,t=r.length;e<t;++e)if(r[e].containsXY(s,i))return!0;return!1}computeExtent(s){createOrUpdateEmpty(s);const i=this.geometries_;for(let e=0,t=i.length;e<t;++e)extend(s,i[e].getExtent());return s}getGeometries(){return cloneGeometries(this.geometries_)}getGeometriesArray(){return this.geometries_}getGeometriesArrayRecursive(){let s=[];const i=this.geometries_;for(let e=0,t=i.length;e<t;++e)i[e].getType()===this.getType()?s=s.concat(i[e].getGeometriesArrayRecursive()):s.push(i[e]);return s}getSimplifiedGeometry(s){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),s<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&s<this.simplifiedGeometryMaxMinSquaredTolerance)return this;const i=[];var r=this.geometries_;let n=!1;for(let e=0,t=r.length;e<t;++e){const h=r[e];var o=h.getSimplifiedGeometry(s);i.push(o),o!==h&&(n=!0)}return n?new GeometryCollection(i):(this.simplifiedGeometryMaxMinSquaredTolerance=s,this)}getType(){return"GeometryCollection"}intersectsExtent(s){const i=this.geometries_;for(let e=0,t=i.length;e<t;++e)if(i[e].intersectsExtent(s))return!0;return!1}isEmpty(){return 0===this.geometries_.length}rotate(s,i){const r=this.geometries_;for(let e=0,t=r.length;e<t;++e)r[e].rotate(s,i);this.changed()}scale(s,i,r){r=r||getCenter(this.getExtent());const n=this.geometries_;for(let e=0,t=n.length;e<t;++e)n[e].scale(s,i,r);this.changed()}setGeometries(e){this.setGeometriesArray(cloneGeometries(e))}setGeometriesArray(e){this.unlistenGeometriesChange_(),this.geometries_=e,this.listenGeometriesChange_(),this.changed()}applyTransform(s){const i=this.geometries_;for(let e=0,t=i.length;e<t;++e)i[e].applyTransform(s);this.changed()}translate(s,i){const r=this.geometries_;for(let e=0,t=r.length;e<t;++e)r[e].translate(s,i);this.changed()}disposeInternal(){this.unlistenGeometriesChange_(),super.disposeInternal()}}function cloneGeometries(e){return e.map(e=>e.clone())}export default GeometryCollection;