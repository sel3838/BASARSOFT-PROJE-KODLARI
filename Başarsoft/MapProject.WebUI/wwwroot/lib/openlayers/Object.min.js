import Event from"./events/Event.js";import ObjectEventType from"./ObjectEventType.js";import Observable from"./Observable.js";import{getUid}from"./util.js";import{isEmpty}from"./obj.js";class ObjectEvent extends Event{constructor(e,t,s){super(e),this.key=t,this.oldValue=s}}class BaseObject extends Observable{constructor(e){super(),this.on,this.once,this.un,getUid(this),this.values_=null,void 0!==e&&this.setProperties(e)}get(e){let t;return t=this.values_&&this.values_.hasOwnProperty(e)?this.values_[e]:t}getKeys(){return this.values_&&Object.keys(this.values_)||[]}getProperties(){return this.values_&&Object.assign({},this.values_)||{}}getPropertiesInternal(){return this.values_}hasProperties(){return!!this.values_}notify(e,t){let s;s="change:"+e,this.hasListener(s)&&this.dispatchEvent(new ObjectEvent(s,e,t)),s=ObjectEventType.PROPERTYCHANGE,this.hasListener(s)&&this.dispatchEvent(new ObjectEvent(s,e,t))}addChangeListener(e,t){this.addEventListener("change:"+e,t)}removeChangeListener(e,t){this.removeEventListener("change:"+e,t)}set(e,t,s){const i=this.values_||(this.values_={});s?i[e]=t:(s=i[e])!==(i[e]=t)&&this.notify(e,s)}setProperties(e,t){for(const s in e)this.set(s,e[s],t)}applyProperties(e){e.values_&&Object.assign(this.values_||(this.values_={}),e.values_)}unset(e,t){var s;this.values_&&e in this.values_&&(s=this.values_[e],delete this.values_[e],isEmpty(this.values_)&&(this.values_=null),t||this.notify(e,s))}}export default BaseObject;export{ObjectEvent};