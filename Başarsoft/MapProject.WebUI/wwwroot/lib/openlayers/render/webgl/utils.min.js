import earcut from"earcut";import{apply as applyTransform}from"../../transform.js";import{clamp}from"../../math.js";const LINESTRING_ANGLE_COSINE_CUTOFF=.985,tmpArray_=[],bufferPositions_={vertexPosition:0,indexPosition:0};function writePointVertex(t,e,r,n,o){t[e+0]=r,t[e+1]=n,t[e+2]=o}function writePointFeatureToBuffers(e,r,t,n,o,a){var s=3+o,i=e[r+0],u=e[r+1];const l=tmpArray_;l.length=o;for(let t=0;t<l.length;t++)l[t]=e[r+2+t];let f=a?a.vertexPosition:0;o=a?a.indexPosition:0,a=f/s;return writePointVertex(t,f,i,u,0),l.length&&t.set(l,f+3),writePointVertex(t,f+=s,i,u,1),l.length&&t.set(l,f+3),writePointVertex(t,f+=s,i,u,2),l.length&&t.set(l,f+3),writePointVertex(t,f+=s,i,u,3),l.length&&t.set(l,f+3),f+=s,n[o++]=a,n[o++]=1+a,n[o++]=3+a,n[o++]=1+a,n[o++]=2+a,n[o++]=3+a,bufferPositions_.vertexPosition=f,bufferPositions_.indexPosition=o,bufferPositions_}function writeLineSegmentToBuffers(t,e,r,n,o,a,s,i,u,l,f){var h=8+i.length,h=a.length/h,e=[t[e+0],t[e+1]],r=[t[r],t[r+1]],c=applyTransform(u,[...e]),p=applyTransform(u,[...r]);function g(t,e,r){var n=Math.sqrt((e[0]-t[0])*(e[0]-t[0])+(e[1]-t[1])*(e[1]-t[1])),e=[(e[0]-t[0])/n,(e[1]-t[1])/n],o=[-e[1],e[0]],a=Math.sqrt((r[0]-t[0])*(r[0]-t[0])+(r[1]-t[1])*(r[1]-t[1])),r=[(r[0]-t[0])/a,(r[1]-t[1])/a],t=0===n||0===a?0:Math.acos(clamp(r[0]*e[0]+r[1]*e[1],-1,1));return 0<r[0]*o[0]+r[1]*o[1]?t:2*Math.PI-t}let m=-1,I=-1,P=f;var d=null!==o;function T(t,e){return 0===e?1e4*t:Math.sign(e)*(1e4*t+Math.abs(e))}return null!==n&&(n=[t[n],t[n+1]],n=applyTransform(u,[...n]),m=g(c,p,n),Math.cos(m)<=LINESTRING_ANGLE_COSINE_CUTOFF&&(P+=Math.tan((m-Math.PI)/2))),d&&(n=[t[o],t[o+1]],d=applyTransform(u,[...n]),I=g(p,c,d),Math.cos(I)<=LINESTRING_ANGLE_COSINE_CUTOFF&&(P+=Math.tan((Math.PI-I)/2))),a.push(e[0],e[1],r[0],r[1],m,I,l,T(0,f)),a.push(...i),a.push(e[0],e[1],r[0],r[1],m,I,l,T(1,f)),a.push(...i),a.push(e[0],e[1],r[0],r[1],m,I,l,T(2,f)),a.push(...i),a.push(e[0],e[1],r[0],r[1],m,I,l,T(3,f)),a.push(...i),s.push(h,1+h,2+h,1+h,3+h,2+h),{length:l+Math.sqrt((p[0]-c[0])*(p[0]-c[0])+(p[1]-c[1])*(p[1]-c[1])),angle:P}}function writePolygonTrianglesToBuffers(e,t,r,n,o){var a=2+o;let s=t;var i=e.slice(s,s+o),u=(s+=o,e[s++]);let l=0;const f=new Array(u-1);for(let t=0;t<u;t++)l+=e[s++],t<u-1&&(f[t]=l);var h=e.slice(s,s+2*l),c=earcut(h,f,2);for(let t=0;t<c.length;t++)n.push(c[t]+r.length/a);for(let t=0;t<h.length;t+=2)r.push(h[t],h[t+1],...i);return s+2*l}function getBlankImageData(){const t=document.createElement("canvas"),e=t.getContext("2d").createImageData(1,1);return e.data[0]=255,e.data[1]=255,e.data[2]=255,e.data[3]=255,e}function colorEncodeId(t,e){var r=256;return(e=e||[])[0]=Math.floor(t/r/r/r)/255,e[1]=Math.floor(t/r/r)%r/255,e[2]=Math.floor(t/r)%r/255,e[3]=t%r/255,e}function colorDecodeId(t){var e=0;return(e+=Math.round(256*t[0]*256*256*255))+Math.round(256*t[1]*256*255)+Math.round(256*t[2]*255)+Math.round(255*t[3])}export{LINESTRING_ANGLE_COSINE_CUTOFF,writePointFeatureToBuffers,writeLineSegmentToBuffers,writePolygonTrianglesToBuffers,getBlankImageData,colorEncodeId,colorDecodeId};