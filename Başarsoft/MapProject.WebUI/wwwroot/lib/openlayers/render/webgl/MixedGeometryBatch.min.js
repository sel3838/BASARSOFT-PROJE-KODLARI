import RenderFeature from"../../render/Feature.js";import{getUid}from"../../util.js";import{inflateEnds}from"../../geom/flat/orient.js";class MixedGeometryBatch{constructor(){this.globalCounter_=0,this.refToFeature_=new Map,this.uidToRef_=new Map,this.freeGlobalRef_=[],this.polygonBatch={entries:{},geometriesCount:0,verticesCount:0,ringsCount:0},this.pointBatch={entries:{},geometriesCount:0},this.lineStringBatch={entries:{},geometriesCount:0,verticesCount:0}}addFeatures(e,i){for(let t=0;t<e.length;t++)this.addFeature(e[t],i)}addFeature(t,e){let i=t.getGeometry();i&&(e&&(i=i.clone()).applyTransform(e),this.addGeometry_(i,t))}clearFeatureEntryInPointBatch_(t){var e=this.pointBatch.entries[getUid(t)];if(e)return this.pointBatch.geometriesCount-=e.flatCoordss.length,delete this.pointBatch.entries[getUid(t)],e}clearFeatureEntryInLineStringBatch_(t){var e=this.lineStringBatch.entries[getUid(t)];if(e)return this.lineStringBatch.verticesCount-=e.verticesCount,this.lineStringBatch.geometriesCount-=e.flatCoordss.length,delete this.lineStringBatch.entries[getUid(t)],e}clearFeatureEntryInPolygonBatch_(t){var e=this.polygonBatch.entries[getUid(t)];if(e)return this.polygonBatch.verticesCount-=e.verticesCount,this.polygonBatch.ringsCount-=e.ringsCount,this.polygonBatch.geometriesCount-=e.flatCoordss.length,delete this.polygonBatch.entries[getUid(t)],e}addGeometry_(t,e){var i=t.getType();switch(i){case"GeometryCollection":var r=t.getGeometriesArray();for(const t of r)this.addGeometry_(t,e);break;case"MultiPolygon":{const n=t;this.addCoordinates_(i,n.getFlatCoordinates(),n.getEndss(),e,getUid(e),n.getStride());break}case"MultiLineString":{const o=t;this.addCoordinates_(i,o.getFlatCoordinates(),o.getEnds(),e,getUid(e),o.getStride());break}case"MultiPoint":{const s=t;this.addCoordinates_(i,s.getFlatCoordinates(),null,e,getUid(e),s.getStride());break}case"Polygon":{const a=t;this.addCoordinates_(i,a.getFlatCoordinates(),a.getEnds(),e,getUid(e),a.getStride());break}case"Point":{const h=t;this.addCoordinates_(i,h.getFlatCoordinates(),null,e,getUid(e),h.getStride());break}case"LineString":case"LinearRing":{const l=t;this.addCoordinates_(i,l.getFlatCoordinates(),null,e,getUid(e),l.getStride());break}}}addCoordinates_(t,i,e,r,n,o){let s;switch(t){case"MultiPolygon":var a=e;for(let e=0,t=a.length;e<t;e++){let t=a[e];var h=0<e?a[e-1]:null;const f=h?h[h.length-1]:0;h=t[t.length-1];t=0<f?t.map(t=>t-f):t,this.addCoordinates_("Polygon",i.slice(f,h),t,r,n,o)}break;case"MultiLineString":var l=e;for(let t=0,e=l.length;t<e;t++){var g=0<t?l[t-1]:0;this.addCoordinates_("LineString",i.slice(g,l[t]),null,r,n,o)}break;case"MultiPoint":for(let t=0,e=i.length;t<e;t+=o)this.addCoordinates_("Point",i.slice(t,t+2),null,r,n,null);break;case"Polygon":var d=e;if(r instanceof RenderFeature){var c=inflateEnds(i,d);if(1<c.length)return void this.addCoordinates_("MultiPolygon",i,c,r,n,o)}this.polygonBatch.entries[n]||(this.polygonBatch.entries[n]=this.addRefToEntry_(n,{feature:r,flatCoordss:[],verticesCount:0,ringsCount:0,ringsVerticesCounts:[]})),s=i.length/o;var c=e.length,u=e.map((t,e,i)=>0<e?(t-i[e-1])/o:t/o);this.polygonBatch.verticesCount+=s,this.polygonBatch.ringsCount+=c,this.polygonBatch.geometriesCount++,this.polygonBatch.entries[n].flatCoordss.push(getFlatCoordinatesXY(i,o)),this.polygonBatch.entries[n].ringsVerticesCounts.push(u),this.polygonBatch.entries[n].verticesCount+=s,this.polygonBatch.entries[n].ringsCount+=c;for(let t=0,e=d.length;t<e;t++){var C=0<t?d[t-1]:0;this.addCoordinates_("LinearRing",i.slice(C,d[t]),null,r,n,o)}break;case"Point":this.pointBatch.entries[n]||(this.pointBatch.entries[n]=this.addRefToEntry_(n,{feature:r,flatCoordss:[]})),this.pointBatch.geometriesCount++,this.pointBatch.entries[n].flatCoordss.push(i);break;case"LineString":case"LinearRing":this.lineStringBatch.entries[n]||(this.lineStringBatch.entries[n]=this.addRefToEntry_(n,{feature:r,flatCoordss:[],verticesCount:0})),s=i.length/o,this.lineStringBatch.verticesCount+=s,this.lineStringBatch.geometriesCount++,this.lineStringBatch.entries[n].flatCoordss.push(getFlatCoordinatesXY(i,o)),this.lineStringBatch.entries[n].verticesCount+=s}}addRefToEntry_(t,e){var i=this.uidToRef_.get(t),r=i||this.freeGlobalRef_.pop()||++this.globalCounter_;return e.ref=r,i||(this.refToFeature_.set(r,e.feature),this.uidToRef_.set(t,r)),e}returnRef_(t,e){if(!t)throw new Error("This feature has no ref: "+e);this.refToFeature_.delete(t),this.uidToRef_.delete(e),this.freeGlobalRef_.push(t)}changeFeature(t){this.removeFeature(t);var e=t.getGeometry();e&&this.addGeometry_(e,t)}removeFeature(t){let e;e=this.clearFeatureEntryInPointBatch_(t)||e,e=this.clearFeatureEntryInPolygonBatch_(t)||e,(e=this.clearFeatureEntryInLineStringBatch_(t)||e)&&this.returnRef_(e.ref,getUid(e.feature))}clear(){this.polygonBatch.entries={},this.polygonBatch.geometriesCount=0,this.polygonBatch.verticesCount=0,this.polygonBatch.ringsCount=0,this.lineStringBatch.entries={},this.lineStringBatch.geometriesCount=0,this.lineStringBatch.verticesCount=0,this.pointBatch.entries={},this.pointBatch.geometriesCount=0,this.globalCounter_=0,this.freeGlobalRef_=[],this.refToFeature_.clear(),this.uidToRef_.clear()}getFeatureFromRef(t){return this.refToFeature_.get(t)}}function getFlatCoordinatesXY(t,i){return 2===i?t:t.filter((t,e)=>e%i<2)}export default MixedGeometryBatch;