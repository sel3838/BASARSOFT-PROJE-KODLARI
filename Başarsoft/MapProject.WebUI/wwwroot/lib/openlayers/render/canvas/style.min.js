import Circle from"../../style/Circle.js";import Fill from"../../style/Fill.js";import Icon from"../../style/Icon.js";import RegularShape from"../../style/RegularShape.js";import Stroke from"../../style/Stroke.js";import Style from"../../style/Style.js";import Text from"../../style/Text.js";import{BooleanType,ColorType,NumberArrayType,NumberType,StringType,computeGeometryType,newParsingContext}from"../../expr/expression.js";import{buildExpression,newEvaluationContext}from"../../expr/cpu.js";import{isEmpty}from"../../obj.js";import{toSize}from"../../size.js";function always(e){return!0}function rulesToStyleFunction(e){const t=newParsingContext(),o=buildRuleSet(e,t),n=newEvaluationContext();return function(e,r){return n.properties=e.getPropertiesInternal(),n.resolution=r,t.featureId&&(r=e.getId(),n.featureId=void 0!==r?r:null),t.geometryType&&(n.geometryType=computeGeometryType(e.getGeometry())),o(n)}}function flatStylesToStyleFunction(r){const n=newParsingContext(),i=r.length,u=new Array(i);for(let e=0;e<i;++e)u[e]=buildStyle(r[e],n);const l=newEvaluationContext(),a=new Array(i);return function(e,r){l.properties=e.getPropertiesInternal(),l.resolution=r,n.featureId&&(r=e.getId(),l.featureId=void 0!==r?r:null);let t=0;for(let e=0;e<i;++e){var o=u[e](l);o&&(a[t]=o,t+=1)}return a.length=t,a}}function buildRuleSet(l,t){const a=l.length,s=new Array(a);for(let e=0;e<a;++e){var o=l[e],n="filter"in o?buildExpression(o.filter,BooleanType,t):always;let r;if(Array.isArray(o.style)){var i=o.style.length;r=new Array(i);for(let e=0;e<i;++e)r[e]=buildStyle(o.style[e],t)}else r=[buildStyle(o.style,t)];s[e]={filter:n,styles:r}}return function(r){const t=[];let o=!1;for(let e=0;e<a;++e){const i=s[e].filter;if(i(r)&&(!l[e].else||!o)){o=!0;for(const u of s[e].styles){var n=u(r);n&&t.push(n)}}}return t}}function buildStyle(e,r){const o=buildFill(e,"",r),n=buildStroke(e,"",r),i=buildText(e,r),u=buildImage(e,r),l=numberEvaluator(e,"z-index",r);if(!(o||n||i||u||isEmpty(e)))throw new Error("No fill, stroke, point, or text symbolizer properties in style: "+JSON.stringify(e));const a=new Style;return function(e){let r=!0;var t;return o&&((t=o(e))&&(r=!1),a.setFill(t)),n&&((t=n(e))&&(r=!1),a.setStroke(t)),i&&((t=i(e))&&(r=!1),a.setText(t)),u&&((t=u(e))&&(r=!1),a.setImage(t)),l&&a.setZIndex(l(e)),r?null:a}}function buildFill(e,r,t){let o;if(!(o=r+"fill-pattern-src"in e?patternEvaluator(e,r+"fill-",t):colorLikeEvaluator(e,r+"fill-color",t)))return null;const n=new Fill;return function(e){e=o(e);return"none"===e?null:(n.setColor(e),n)}}function buildStroke(e,r,t){const o=numberEvaluator(e,r+"stroke-width",t),n=colorLikeEvaluator(e,r+"stroke-color",t);if(!o&&!n)return null;const i=stringEvaluator(e,r+"stroke-line-cap",t),u=stringEvaluator(e,r+"stroke-line-join",t),l=numberArrayEvaluator(e,r+"stroke-line-dash",t),a=numberEvaluator(e,r+"stroke-line-dash-offset",t),s=numberEvaluator(e,r+"stroke-miter-limit",t),c=new Stroke;return function(e){if(n){var r=n(e);if("none"===r)return null;c.setColor(r)}if(o&&c.setWidth(o(e)),i){r=i(e);if("butt"!==r&&"round"!==r&&"square"!==r)throw new Error("Expected butt, round, or square line cap");c.setLineCap(r)}if(u){r=u(e);if("bevel"!==r&&"round"!==r&&"miter"!==r)throw new Error("Expected bevel, round, or miter line join");c.setLineJoin(r)}return l&&c.setLineDash(l(e)),a&&c.setLineDashOffset(a(e)),s&&c.setMiterLimit(s(e)),c}}function buildText(e,r){var t="text-";const o=stringEvaluator(e,t+"value",r);if(!o)return null;const n=buildFill(e,t,r),i=buildFill(e,t+"background-",r),u=buildStroke(e,t,r),l=buildStroke(e,t+"background-",r),a=stringEvaluator(e,t+"font",r),s=numberEvaluator(e,t+"max-angle",r),c=numberEvaluator(e,t+"offset-x",r),f=numberEvaluator(e,t+"offset-y",r),p=booleanEvaluator(e,t+"overflow",r),d=stringEvaluator(e,t+"placement",r),b=numberEvaluator(e,t+"repeat",r),m=sizeLikeEvaluator(e,t+"scale",r),E=booleanEvaluator(e,t+"rotate-with-view",r),y=numberEvaluator(e,t+"rotation",r),v=stringEvaluator(e,t+"align",r),g=stringEvaluator(e,t+"justify",r),w=stringEvaluator(e,t+"baseline",r),h=numberArrayEvaluator(e,t+"padding",r);r=optionalDeclutterMode(e,t+"declutter-mode");const x=new Text({declutterMode:r});return function(e){if(x.setText(o(e)),n&&x.setFill(n(e)),i&&x.setBackgroundFill(i(e)),u&&x.setStroke(u(e)),l&&x.setBackgroundStroke(l(e)),a&&x.setFont(a(e)),s&&x.setMaxAngle(s(e)),c&&x.setOffsetX(c(e)),f&&x.setOffsetY(f(e)),p&&x.setOverflow(p(e)),d){var r=d(e);if("point"!==r&&"line"!==r)throw new Error("Expected point or line for text-placement");x.setPlacement(r)}if(b&&x.setRepeat(b(e)),m&&x.setScale(m(e)),E&&x.setRotateWithView(E(e)),y&&x.setRotation(y(e)),v){r=v(e);if("left"!==r&&"center"!==r&&"right"!==r&&"end"!==r&&"start"!==r)throw new Error("Expected left, right, center, start, or end for text-align");x.setTextAlign(r)}if(g){r=g(e);if("left"!==r&&"right"!==r&&"center"!==r)throw new Error("Expected left, right, or center for text-justify");x.setJustify(r)}if(w){r=w(e);if("bottom"!==r&&"top"!==r&&"middle"!==r&&"alphabetic"!==r&&"hanging"!==r)throw new Error("Expected bottom, top, middle, alphabetic, or hanging for text-baseline");x.setTextBaseline(r)}return h&&x.setPadding(h(e)),x}}function buildImage(e,r){return"icon-src"in e?buildIcon(e,r):"shape-points"in e?buildShape(e,r):"circle-radius"in e?buildCircle(e,r):null}function buildIcon(e,r){var t="icon-",o=t+"src",o=requireString(e[o],o);const n=coordinateEvaluator(e,t+"anchor",r),i=sizeLikeEvaluator(e,t+"scale",r),u=numberEvaluator(e,t+"opacity",r),l=coordinateEvaluator(e,t+"displacement",r),a=numberEvaluator(e,t+"rotation",r),s=booleanEvaluator(e,t+"rotate-with-view",r);var r=optionalIconOrigin(e,t+"anchor-origin"),c=optionalIconAnchorUnits(e,t+"anchor-x-units"),f=optionalIconAnchorUnits(e,t+"anchor-y-units"),p=optionalColorLike(e,t+"color"),d=optionalString(e,t+"cross-origin"),b=optionalNumberArray(e,t+"offset"),m=optionalIconOrigin(e,t+"offset-origin"),E=optionalNumber(e,t+"width"),y=optionalNumber(e,t+"height"),v=optionalSize(e,t+"size"),e=optionalDeclutterMode(e,t+"declutter-mode");const g=new Icon({src:o,anchorOrigin:r,anchorXUnits:c,anchorYUnits:f,color:p,crossOrigin:d,offset:b,offsetOrigin:m,height:y,width:E,size:v,declutterMode:e});return function(e){return u&&g.setOpacity(u(e)),l&&g.setDisplacement(l(e)),a&&g.setRotation(a(e)),s&&g.setRotateWithView(s(e)),i&&g.setScale(i(e)),n&&g.setAnchor(n(e)),g}}function buildShape(e,r){var t="shape-",o=t+"points",n=t+"radius",o=requireNumber(e[o],o),n=requireNumber(e[n],n);const i=buildFill(e,t,r),u=buildStroke(e,t,r),l=sizeLikeEvaluator(e,t+"scale",r),a=coordinateEvaluator(e,t+"displacement",r),s=numberEvaluator(e,t+"rotation",r),c=booleanEvaluator(e,t+"rotate-with-view",r);var r=optionalNumber(e,t+"radius2"),f=optionalNumber(e,t+"angle"),e=optionalDeclutterMode(e,t+"declutter-mode");const p=new RegularShape({points:o,radius:n,radius2:r,angle:f,declutterMode:e});return function(e){return i&&p.setFill(i(e)),u&&p.setStroke(u(e)),a&&p.setDisplacement(a(e)),s&&p.setRotation(s(e)),c&&p.setRotateWithView(c(e)),l&&p.setScale(l(e)),p}}function buildCircle(e,r){var t="circle-";const o=buildFill(e,t,r),n=buildStroke(e,t,r),i=numberEvaluator(e,t+"radius",r),u=sizeLikeEvaluator(e,t+"scale",r),l=coordinateEvaluator(e,t+"displacement",r),a=numberEvaluator(e,t+"rotation",r),s=booleanEvaluator(e,t+"rotate-with-view",r);r=optionalDeclutterMode(e,t+"declutter-mode");const c=new Circle({radius:5,declutterMode:r});return function(e){return i&&c.setRadius(i(e)),o&&c.setFill(o(e)),n&&c.setStroke(n(e)),l&&c.setDisplacement(l(e)),a&&c.setRotation(a(e)),s&&c.setRotateWithView(s(e)),u&&c.setScale(u(e)),c}}function numberEvaluator(e,r,t){if(r in e){const o=buildExpression(e[r],NumberType,t);return function(e){return requireNumber(o(e),r)}}}function stringEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],StringType,t);return function(e){return requireString(o(e),r)}}function patternEvaluator(e,r,t){const o=stringEvaluator(e,r+"pattern-src",t),n=sizeEvaluator(e,r+"pattern-offset",t),i=sizeEvaluator(e,r+"pattern-size",t),u=colorLikeEvaluator(e,r+"color",t);return function(e){return{src:o(e),offset:n&&n(e),size:i&&i(e),color:u&&u(e)}}}function booleanEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],BooleanType,t);return function(e){e=o(e);if("boolean"!=typeof e)throw new Error("Expected a boolean for "+r);return e}}function colorLikeEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],ColorType|StringType,t);return function(e){return requireColorLike(o(e),r)}}function numberArrayEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],NumberArrayType,t);return function(e){return requireNumberArray(o(e),r)}}function coordinateEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],NumberArrayType,t);return function(e){e=requireNumberArray(o(e),r);if(2!==e.length)throw new Error("Expected two numbers for "+r);return e}}function sizeEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],NumberArrayType,t);return function(e){return requireSize(o(e),r)}}function sizeLikeEvaluator(e,r,t){if(!(r in e))return null;const o=buildExpression(e[r],NumberArrayType|NumberType,t);return function(e){return requireSizeLike(o(e),r)}}function optionalNumber(e,r){e=e[r];if(void 0!==e){if("number"!=typeof e)throw new Error("Expected a number for "+r);return e}}function optionalSize(e,r){e=e[r];if(void 0!==e){if("number"==typeof e)return toSize(e);if(!Array.isArray(e))throw new Error("Expected a number or size array for "+r);if(2!==e.length||"number"!=typeof e[0]||"number"!=typeof e[1])throw new Error("Expected a number or size array for "+r);return e}}function optionalString(e,r){e=e[r];if(void 0!==e){if("string"!=typeof e)throw new Error("Expected a string for "+r);return e}}function optionalIconOrigin(e,r){e=e[r];if(void 0!==e){if("bottom-left"!==e&&"bottom-right"!==e&&"top-left"!==e&&"top-right"!==e)throw new Error("Expected bottom-left, bottom-right, top-left, or top-right for "+r);return e}}function optionalIconAnchorUnits(e,r){e=e[r];if(void 0!==e){if("pixels"!==e&&"fraction"!==e)throw new Error("Expected pixels or fraction for "+r);return e}}function optionalNumberArray(e,r){e=e[r];if(void 0!==e)return requireNumberArray(e,r)}function optionalDeclutterMode(e,r){e=e[r];if(void 0!==e){if("string"!=typeof e)throw new Error("Expected a string for "+r);if("declutter"!==e&&"obstacle"!==e&&"none"!==e)throw new Error("Expected declutter, obstacle, or none for "+r);return e}}function optionalColorLike(e,r){e=e[r];if(void 0!==e)return requireColorLike(e,r)}function requireNumberArray(r,t){if(!Array.isArray(r))throw new Error("Expected an array for "+t);var o=r.length;for(let e=0;e<o;++e)if("number"!=typeof r[e])throw new Error("Expected an array of numbers for "+t);return r}function requireString(e,r){if("string"!=typeof e)throw new Error("Expected a string for "+r);return e}function requireNumber(e,r){if("number"!=typeof e)throw new Error("Expected a number for "+r);return e}function requireColorLike(e,r){if("string"==typeof e)return e;var e=requireNumberArray(e,r),t=e.length;if(t<3||4<t)throw new Error("Expected a color with 3 or 4 values for "+r);return e}function requireSize(e,r){e=requireNumberArray(e,r);if(2!==e.length)throw new Error("Expected an array of two numbers for "+r);return e}function requireSizeLike(e,r){return"number"==typeof e?e:requireSize(e,r)}export{rulesToStyleFunction,flatStylesToStyleFunction,buildRuleSet,buildStyle};