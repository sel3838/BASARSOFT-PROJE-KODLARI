import TileImage from"./TileImage.js";import ViewHint from"../ViewHint.js";import{createXYZ,extentFromProjection}from"../tilegrid.js";import{getBottomLeft,getTopRight}from"../extent.js";import{toLonLat}from"../proj.js";const createSessionUrl="https://tile.googleapis.com/v1/createSession",tileUrl="https://tile.googleapis.com/v1/2dtiles",attributionUrl="https://tile.googleapis.com/tile/v1/viewport",maxZoom=22;class Google extends TileImage{constructor(t){var e=!!t.highDpi,i=!(!0===t.overlay);super({attributionsCollapsible:t.attributionsCollapsible,cacheSize:t.cacheSize,crossOrigin:"anonymous",interpolate:t.interpolate,opaque:i,projection:"EPSG:3857",reprojectionErrorThreshold:t.reprojectionErrorThreshold,state:"loading",tileLoadFunction:t.tileLoadFunction,tilePixelRatio:e?2:1,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,zDirection:t.zDirection}),this.apiKey_=t.key,this.error_=null;const o={mapType:t.mapType||"roadmap",language:t.language||"en-US",region:t.region||"US"};t.imageFormat&&(o.imageFormat=t.imageFormat),t.scale&&(o.scale=t.scale),e&&(o.highDpi=!0),t.layerTypes&&(o.layerTypes=t.layerTypes),t.styles&&(o.styles=t.styles),!0===t.overlay&&(o.overlay=!0),this.sessionTokenRequest_=o,this.sessionTokenValue_,this.sessionRefreshId_,this.previousViewportAttribution_,this.previousViewportExtent_,this.createSession_()}getError(){return this.error_}fetchSessionToken(t,e){return fetch(t,e)}async createSession_(){var t=createSessionUrl+"?key="+this.apiKey_,e={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(this.sessionTokenRequest_)};const i=await this.fetchSessionToken(t,e);if(i.ok){t=await i.json(),e=this.getTilePixelRatio(1),e=[t.tileWidth/e,t.tileHeight/e];this.tileGrid=createXYZ({extent:extentFromProjection(this.getProjection()),maxZoom:maxZoom,tileSize:e});const r=t.session,n=(this.sessionTokenValue_=r,this.apiKey_);this.tileUrlFunction=function(t,e,i){var o=t[0],s=t[1],t=t[2];return`${tileUrl}/${o}/${s}/${t}?session=${r}&key=`+n};e=1e3*parseInt(t.expiry,10),t=Math.max(e-Date.now()-6e4,1);this.sessionRefreshId_=setTimeout(()=>this.createSession_(),t),this.setAttributions(this.fetchAttributions_.bind(this)),this.setState("ready")}else{try{var o=await i.json();this.error_=new Error(o.error.message)}catch{this.error_=new Error("Error fetching session token")}this.setState("error")}}async fetchAttributions_(t){if(t.viewHints[ViewHint.ANIMATING]||t.viewHints[ViewHint.INTERACTING]||t.animate)return this.previousViewportAttribution_;var[e,i]=toLonLat(getBottomLeft(t.extent),t.viewState.projection),[o,s]=toLonLat(getTopRight(t.extent),t.viewState.projection);const r=this.getTileGrid();t=`zoom=${r.getZForResolution(t.viewState.resolution,this.zDirection)}&north=${s}&south=${i}&east=${o}&west=`+e;if(this.previousViewportExtent_==t)return this.previousViewportAttribution_;this.previousViewportExtent_=t;s=this.sessionTokenValue_,i=this.apiKey_,o=attributionUrl+`?session=${s}&key=${i}&`+t;return this.previousViewportAttribution_=await fetch(o).then(t=>t.json()).then(t=>t.copyright),this.previousViewportAttribution_}disposeInternal(){clearTimeout(this.sessionRefreshId_),super.disposeInternal()}}export default Google;