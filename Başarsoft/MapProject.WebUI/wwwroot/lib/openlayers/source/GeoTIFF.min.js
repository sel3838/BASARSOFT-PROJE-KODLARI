import DataTile from"./DataTile.js";import TileGrid from"../tilegrid/TileGrid.js";import{Pool,globals as geotiffGlobals,fromBlob as tiffFromBlob,fromUrl as tiffFromUrl,fromUrls as tiffFromUrls}from"geotiff";import{Projection,get as getCachedProjection,toUserCoordinate,toUserExtent}from"../proj.js";import{clamp}from"../math.js";import{getCenter,getIntersection}from"../extent.js";import{error as logError}from"../console.js";import{fromCode as unitsFromCode}from"../proj/Units.js";function isMask(e){return 4==(4&(e.fileDirectory.NewSubfileType||0))}function readRGB(e,t){if(!e)return!1;if(!0===e)return!0;if(3!==t.getSamplesPerPixel())return!1;e=t.fileDirectory.PhotometricInterpretation,t=geotiffGlobals.photometricInterpretations;return e===t.CMYK||e===t.YCbCr||e===t.CIELab||e===t.ICCLab}const STATISTICS_MAXIMUM="STATISTICS_MAXIMUM",STATISTICS_MINIMUM="STATISTICS_MINIMUM",defaultTileSize=256;let workerPool;function getWorkerPool(){return workerPool=workerPool||new Pool}function getBoundingBox(t){try{return t.getBoundingBox()}catch(e){return[0,0,t.getWidth(),t.getHeight()]}}function getOrigin(t){try{return t.getOrigin().slice(0,2)}catch(e){return[0,t.getHeight()]}}function getResolutions(t,r){try{return t.getResolution(r)}catch(e){return[r.getWidth()/t.getWidth(),r.getHeight()/t.getHeight()]}}function getProjection(t){t=t.geoKeys;if(!t)return null;if(t.ProjectedCSTypeGeoKey&&32767!==t.ProjectedCSTypeGeoKey){var r="EPSG:"+t.ProjectedCSTypeGeoKey;let e=getCachedProjection(r);return e||(o=unitsFromCode(t.ProjLinearUnitsGeoKey))&&(e=new Projection({code:r,units:o})),e}if(t.GeographicTypeGeoKey&&32767!==t.GeographicTypeGeoKey){var o,r="EPSG:"+t.GeographicTypeGeoKey;let e=getCachedProjection(r);return e||(o=unitsFromCode(t.GeogAngularUnitsGeoKey))&&(e=new Projection({code:r,units:o})),e}return null}function getImagesForTIFF(o){return o.getImageCount().then(function(t){const r=new Array(t);for(let e=0;e<t;++e)r[e]=o.getImage(e);return Promise.all(r)})}function getImagesForSource(e,t){let r;return(r=e.blob?tiffFromBlob(e.blob):e.overviews?tiffFromUrls(e.url,e.overviews,t):tiffFromUrl(e.url,t)).then(getImagesForTIFF)}function assertEqual(t,r,o,i,n){if(Array.isArray(t)){var e,s=t.length;if(!Array.isArray(r)||s!=r.length)throw n(e=new Error(i)),e;for(let e=0;e<s;++e)assertEqual(t[e],r[e],o,i,n)}else if(Math.abs(t-r)>o*t)throw new Error(i)}function getMinForDataType(e){return e instanceof Int8Array?-128:e instanceof Int16Array?-32768:e instanceof Int32Array?-2147483648:e instanceof Float32Array?12e-39:0}function getMaxForDataType(e){return e instanceof Int8Array?127:e instanceof Uint8Array||e instanceof Uint8ClampedArray?255:e instanceof Int16Array?32767:e instanceof Uint16Array?65535:e instanceof Int32Array?2147483647:e instanceof Uint32Array?4294967295:e instanceof Float32Array?34e37:255}class GeoTIFFSource extends DataTile{constructor(e){super({state:"loading",tileGrid:null,projection:e.projection||null,opaque:e.opaque,transition:e.transition,interpolate:!1!==e.interpolate,wrapX:e.wrapX}),this.sourceInfo_=e.sources;var t=this.sourceInfo_.length;this.sourceOptions_=e.sourceOptions,this.sourceImagery_=new Array(t),this.sourceMasks_=new Array(t),this.resolutionFactors_=new Array(t),this.samplesPerPixel_,this.nodataValues_,this.metadata_,this.normalize_=!1!==e.normalize,this.addAlpha_=!1,this.error_=null,this.convertToRGB_=e.convertToRGB||!1,this.setKey(this.sourceInfo_.map(e=>e.url).join(","));const r=this,o=new Array(t);for(let e=0;e<t;++e)o[e]=getImagesForSource(this.sourceInfo_[e],this.sourceOptions_);Promise.all(o).then(function(e){r.configure_(e)}).catch(function(e){logError(e),r.error_=e,r.setState("error")})}getError(){return this.error_}determineProjection(e){var t=e[0];for(let e=t.length-1;0<=e;--e){var r=getProjection(t[e]);if(r){this.projection=r;break}}}configure_(e){let i,n,s,a,l;const h=new Array(e.length),c=new Array(e.length),u=new Array(e.length);let g=0;var t=e.length;for(let o=0;o<t;++o){const T=[],A=[];e[o].forEach(e=>{(isMask(e)?A:T).push(e)});var f=T.length;if(0<A.length&&A.length!==f)throw new Error(`Expected one mask per image found ${A.length} masks and ${f} images`);let t,r;const w=new Array(f),S=new Array(f),v=new Array(f);c[o]=new Array(f),u[o]=new Array(f);for(let e=0;e<f;++e){const M=T[e];var d=M.getGDALNoData(),d=(u[o][e]=M.getGDALMetadata(0),c[o][e]=d,this.sourceInfo_[o].bands),d=(h[o]=d?d.length:M.getSamplesPerPixel(),f-(e+1)),m=(t=t||getBoundingBox(M),r=r||getOrigin(M),getResolutions(M,T[0]));v[d]=m[0];const P=[M.getTileWidth(),M.getTileHeight()];P[0]!==P[1]&&P[1]<defaultTileSize&&(P[0]=defaultTileSize,P[1]=defaultTileSize),w[d]=P;m=m[0]/Math.abs(m[1]);S[d]=[P[0],P[1]/m]}if(i?getIntersection(i,t,i):i=t,n?(p=`Origin mismatch for source ${o}, got [${r}] but expected [${n}]`,assertEqual(n,r,0,p,this.viewRejector)):n=r,l){l.length-g>v.length&&(g=l.length-v.length);const F=l[l.length-1]/v[v.length-1];this.resolutionFactors_[o]=F;var p=v.map(e=>e*=F),y=`Resolution mismatch for source ${o}, got [${p}] but expected [${l}]`;assertEqual(l.slice(g,l.length),p,.02,y,this.viewRejector)}else l=v,this.resolutionFactors_[o]=1;s?assertEqual(s.slice(g,s.length),S,.01,"Tile size mismatch for source "+o,this.viewRejector):s=S,a?assertEqual(a.slice(g,a.length),w,0,"Tile size mismatch for source "+o,this.viewRejector):a=w,this.sourceImagery_[o]=T.reverse(),this.sourceMasks_[o]=A.reverse()}for(let e=0,t=this.sourceImagery_.length;e<t;++e){const j=this.sourceImagery_[e];for(;j.length<l.length;)j.unshift(void 0)}this.getProjection()||this.determineProjection(e),this.samplesPerPixel_=h,this.nodataValues_=c,this.metadata_=u;e:for(let e=0;e<t;++e){if(void 0!==this.sourceInfo_[e].nodata){this.addAlpha_=!0;break}if(this.sourceMasks_[e].length){this.addAlpha_=!0;break}var r=c[e],o=this.sourceInfo_[e].bands;if(o){for(let e=0;e<o.length;++e)if(null!==r[o[e]-1]){this.addAlpha_=!0;break e}}else for(let e=0;e<r.length;++e)if(null!==r[e]){this.addAlpha_=!0;break e}}let I=this.addAlpha_?1:0;for(let e=0;e<t;++e)I+=h[e];this.bandCount=I;var _=new TileGrid({extent:i,minZoom:g,origin:n,resolutions:l,tileSizes:s});this.tileGrid=_,this.setTileSizes(a),this.setLoader(this.loadTile_.bind(this)),this.setState("ready");2===l.length?l=[l[0],l[1],l[1]/2]:1===l.length&&(l=[2*l[0],l[0],l[0]/2]),this.viewResolver({showFullExtent:!0,projection:this.projection,resolutions:l,center:toUserCoordinate(getCenter(i),this.projection),extent:toUserExtent(i,this.projection),zoom:1})}loadTile_(o,i,n){var s=this.getTileSize(o),a=this.sourceImagery_.length;const l=new Array(2*a),h=this.nodataValues_;var c=this.sourceInfo_,u=getWorkerPool();for(let r=0;r<a;++r){const d=c[r];var g=this.resolutionFactors_[r],g=[Math.round(i*(s[0]*g)),Math.round(n*(s[1]*g)),Math.round((i+1)*(s[0]*g)),Math.round((n+1)*(s[1]*g))];const m=this.sourceImagery_[r][o];let e;d.bands&&(e=d.bands.map(function(e){return e-1}));let t;t="nodata"in d&&null!==d.nodata?d.nodata:e?e.map(function(e){return h[r][e]}):h[r];var f={window:g,width:s[0],height:s[1],samples:e,fillValue:t,pool:u,interleave:!1},f=(readRGB(this.convertToRGB_,m)?l[r]=m.readRGB(f):l[r]=m.readRasters(f),a+r);const p=this.sourceMasks_[r][o];p?l[f]=p.readRasters({window:g,width:s[0],height:s[1],samples:[0],pool:u,interleave:!1}):l[f]=Promise.resolve(null)}return Promise.all(l).then(this.composeTile_.bind(this,s)).catch(function(e){throw logError(e),e})}composeTile_(e,l){var r=this.metadata_,h=this.sourceInfo_,c=this.sourceImagery_.length,t=this.bandCount,u=this.samplesPerPixel_,g=this.nodataValues_,f=this.normalize_,d=this.addAlpha_,o=e[0]*e[1],e=o*t;let m,p=(m=new(f?Uint8Array:Float32Array)(e),0);for(let a=0;a<o;++a){let s=d;for(let n=0;n<c;++n){var y,I=h[n];let e=I.min,t=I.max,o,i;f&&(y=r[n][0],void 0===e&&(e=y&&STATISTICS_MINIMUM in y?parseFloat(y[STATISTICS_MINIMUM]):getMinForDataType(l[n][0])),void 0===t&&(t=y&&STATISTICS_MAXIMUM in y?parseFloat(y[STATISTICS_MAXIMUM]):getMaxForDataType(l[n][0])),o=255/(t-e),i=-e*o);for(let r=0;r<u[n];++r){var _=l[n][r][a];let e;if(e=f?clamp(o*_+i,0,255):_,d){let t=I.nodata;if(void 0===t){let e;e=I.bands?I.bands[r]-1:r,t=g[n][e]}var T=isNaN(t);(!T&&_!==t||T&&!isNaN(_))&&(s=!1,m[p]=e)}else m[p]=e;p++}s||(y=l[c+n])&&!y[0][a]&&(s=!0)}d&&(s||(m[p]=255),p++)}return m}}GeoTIFFSource.prototype.getView;export default GeoTIFFSource;