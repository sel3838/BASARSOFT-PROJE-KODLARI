import{assert}from"./asserts.js";const tmp_=new Array(6);function create(){return[1,0,0,1,0,0]}function reset(t){return set(t,1,0,0,1,0,0)}function multiply(t,r){var e=t[0],n=t[1],a=t[2],o=t[3],s=t[4],i=t[5],u=r[0],c=r[1],m=r[2],p=r[3],f=r[4],r=r[5];return t[0]=e*u+a*c,t[1]=n*u+o*c,t[2]=e*m+a*p,t[3]=n*m+o*p,t[4]=e*f+a*r+s,t[5]=n*f+o*r+i,t}function set(t,r,e,n,a,o,s){return t[0]=r,t[1]=e,t[2]=n,t[3]=a,t[4]=o,t[5]=s,t}function setFromArray(t,r){return t[0]=r[0],t[1]=r[1],t[2]=r[2],t[3]=r[3],t[4]=r[4],t[5]=r[5],t}function apply(t,r){var e=r[0],n=r[1];return r[0]=t[0]*e+t[2]*n+t[4],r[1]=t[1]*e+t[3]*n+t[5],r}function rotate(t,r){var e=Math.cos(r),r=Math.sin(r);return multiply(t,set(tmp_,e,r,-r,e,0,0))}function scale(t,r,e){return multiply(t,set(tmp_,r,0,0,e,0,0))}function makeScale(t,r,e){return set(t,r,0,0,e,0,0)}function translate(t,r,e){return multiply(t,set(tmp_,1,0,0,1,r,e))}function compose(t,r,e,n,a,o,s,i){var u=Math.sin(o),o=Math.cos(o);return t[0]=n*o,t[1]=a*u,t[2]=-n*u,t[3]=a*o,t[4]=s*n*o-i*n*u+r,t[5]=s*a*u+i*a*o+e,t}function composeCssTransform(t,r,e,n,a,o,s){return toString(compose(create(),t,r,e,n,a,o,s))}function invert(t){return makeInverse(t,t)}function makeInverse(t,r){var e=determinant(r),n=(assert(0!==e,"Transformation matrix cannot be inverted"),r[0]),a=r[1],o=r[2],s=r[3],i=r[4],r=r[5];return t[0]=s/e,t[1]=-a/e,t[2]=-o/e,t[3]=n/e,t[4]=(o*r-s*i)/e,t[5]=-(n*r-a*i)/e,t}function determinant(t){return t[0]*t[3]-t[1]*t[2]}const matrixPrecision=[1e6,1e6,1e6,1e6,2,2];function toString(t){return"matrix("+t.map((t,r)=>Math.round(t*matrixPrecision[r])/matrixPrecision[r]).join(", ")+")"}export{create,reset,multiply,set,setFromArray,apply,rotate,scale,makeScale,translate,compose,composeCssTransform,invert,makeInverse,determinant,toString};